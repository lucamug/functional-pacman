#!/usr/bin/env node

if (parseInt(process.versions.node.split('.')[0]) < 20) {
  throw new Error("This program requires Node v20 or later to run")
}

try {
(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

var $author$project$Main$GotInput = function (a) {
	return { $: 0, a: a };
};
var $gren_lang$node$Node$InitDone = function (a) {
	return { $: 0, a: a };
};
var $gren_lang$node$Node$Uninitialized = { $: 0 };


// TASKS

function _Scheduler_succeed(value) {
  return {
    $: 0,
    a: value,
  };
}

function _Scheduler_fail(error) {
  return {
    $: 1,
    a: error,
  };
}

function _Scheduler_binding(callback) {
  return {
    $: 2,
    b: callback,
    c: null,
  };
}

var _Scheduler_andThen = F2(function (callback, task) {
  return {
    $: 3,
    b: callback,
    d: task,
  };
});

var _Scheduler_onError = F2(function (callback, task) {
  return {
    $: 4,
    b: callback,
    d: task,
  };
});

function _Scheduler_receive(callback) {
  return {
    $: 5,
    b: callback,
  };
}

// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task) {
  var proc = {
    $: 0,
    e: _Scheduler_guid++,
    f: task,
    g: null,
    h: [],
  };

  _Scheduler_enqueue(proc);

  return proc;
}

function _Scheduler_spawn(task) {
  return _Scheduler_binding(function (callback) {
    callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
  });
}

function _Scheduler_rawSend(proc, msg) {
  proc.h.push(msg);
  _Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function (proc, msg) {
  return _Scheduler_binding(function (callback) {
    _Scheduler_rawSend(proc, msg);
    callback(_Scheduler_succeed({}));
  });
});

function _Scheduler_kill(proc) {
  return _Scheduler_binding(function (callback) {
    var task = proc.f;
    if (task && task.$ === 2 && task.c) {
      task.c();
    }

    proc.f = null;

    callback(_Scheduler_succeed({}));
  });
}

/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/

var _Scheduler_working = false;
var _Scheduler_queue = [];

function _Scheduler_enqueue(proc) {
  _Scheduler_queue.push(proc);
  if (_Scheduler_working) {
    return;
  }
  _Scheduler_working = true;
  while ((proc = _Scheduler_queue.shift())) {
    _Scheduler_step(proc);
  }
  _Scheduler_working = false;
}

function _Scheduler_step(proc) {
  while (proc.f) {
    var rootTag = proc.f.$;
    if (rootTag === 0 || rootTag === 1) {
      while (proc.g && proc.g.$ !== rootTag) {
        proc.g = proc.g.i;
      }
      if (!proc.g) {
        return;
      }
      proc.f = proc.g.b(proc.f.a);
      proc.g = proc.g.i;
    } else if (rootTag === 2) {
      proc.f.c = proc.f.b(function (newRoot) {
        proc.f = newRoot;
        _Scheduler_enqueue(proc);
      });
      return;
    } else if (rootTag === 5) {
      if (proc.h.length === 0) {
        return;
      }
      proc.f = proc.f.b(proc.h.shift());
    } // if (rootTag === 3 || rootTag === 4)
    else {
      proc.g = {
        $: rootTag === 3 ? 0 : 1,
        b: proc.f.b,
        i: proc.g,
      };
      proc.f = proc.f.d;
    }
  }
}
var $gren_lang$core$Task$andThen = _Scheduler_andThen;
var $gren_lang$core$Basics$apL$ = function(f, x) {
	return f(x);
};
var $gren_lang$core$Basics$apL = F2($gren_lang$core$Basics$apL$);
var $gren_lang$core$Basics$apR$ = function(x, f) {
	return f(x);
};
var $gren_lang$core$Basics$apR = F2($gren_lang$core$Basics$apR$);


var process = require("node:process");

var _Node_log = F2(function (text, args) {
  // This function is used for simple applications where the main function returns String
  // NOTE: this function needs _Platform_export available to work
  console.log(text);
  return {};
});

var _Node_init = _Scheduler_binding(function (callback) {
  callback(
    _Scheduler_succeed({
      a6: _FilePath_fromString(module.filename),
      bL: process.arch,
      a7: process.argv,
      bv: process.platform,
      az: process.stderr,
      am: process.stdin,
      aA: process.stdout,
    })
  );
});

var _Node_getEnvironmentVariables = _Scheduler_binding(function (callback) {
  callback(_Scheduler_succeed(_Node_objToDict(process.env)));
});

var _Node_exitWithCode = function (code) {
  return _Scheduler_binding(function (callback) {
    process.exit(code);
  });
};

var _Node_setExitCode = function (code) {
  return _Scheduler_binding(function (callback) {
    process.exitCode = code;
    callback(_Scheduler_succeed({}));
  });
};

// Helpers

function _Node_objToDict(obj) {
  var dict = $gren_lang$core$Dict$empty;

  for (var key in obj) {
    dict = A3($gren_lang$core$Dict$set, key, obj[key], dict);
  }

  return dict;
}



var path = require("node:path");
var process = require("node:process");

var _FilePath_fromPosix = function (str) {
  return _FilePath_parse(path.posix, str);
};

var _FilePath_fromWin32 = function (str) {
  return _FilePath_parse(path.win32, str);
};

var _FilePath_fromString = function (str) {
  return _FilePath_parse(path, str);
};

var _FilePath_parse = function (pathMod, str) {
  const result = pathMod.parse(pathMod.normalize(str));

  const root = result.root;
  const dirStr = result.dir.startsWith(root)
    ? result.dir.substring(root.length)
    : result.dir;

  const filename =
    result.name === "." && result.ext.length === 0 ? "" : result.name;

  return {
    K: dirStr === "" ? [] : dirStr.split(pathMod.sep),
    t: result.ext.length > 0 ? result.ext.substring(1) : "",
    u: filename,
    cn: result.root,
  };
};

var _FilePath_toPosix = function (filePath) {
  if (_FilePath_isEmpty(filePath)) {
    return ".";
  }

  if (filePath.cn !== "" && filePath.cn !== "/") {
    filePath = { ...filePath, cn: "/" };
  }

  return _FilePath_format(path.posix, filePath);
};

var _FilePath_toWin32 = function (filePath) {
  if (_FilePath_isEmpty(filePath)) {
    return ".";
  }

  return _FilePath_format(path.win32, filePath);
};

var _FilePath_toString = function (filePath) {
  if (process.platform.toLowerCase() === "win32") {
    return _FilePath_toWin32(filePath);
  }

  return _FilePath_toPosix(filePath);
};

var _FilePath_isEmpty = function (filePath) {
  return (
    filePath.cn === "" &&
    filePath.K.length === 0 &&
    filePath.u === "" &&
    filePath.t === ""
  );
};

var _FilePath_format = function (pathMod, filePath) {
  const filename =
    filePath.t.length > 0
      ? filePath.u + "." + filePath.t
      : filePath.u;

  let pathArray = null;
  if (filename === "") {
    pathArray = filePath.K;
  } else {
    pathArray = filePath.K.concat(filename);
  }

  return filePath.cn + pathArray.join(pathMod.sep);
};


// PROGRAMS

var _Platform_worker = F4(function (impl, flagDecoder, debugMetadata, args) {
  return _Platform_initialize(
    flagDecoder,
    args,
    impl.b4,
    impl.cz,
    impl.ct,
    function () {
      return function () {};
    },
  );
});

// INITIALIZE A PROGRAM

function _Platform_initialize(
  flagDecoder,
  args,
  init,
  update,
  subscriptions,
  stepperBuilder,
) {
  var result = A2(
    _Json_run,
    flagDecoder,
    _Json_wrap(args ? args["flags"] : undefined),
  );
  $gren_lang$core$Result$isOk(result) ||
    _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
  var managers = {};
  var initPair = init(result.a);
  var model = initPair.bp;
  var stepper = stepperBuilder(sendToApp, model);
  var ports = _Platform_setupEffects(managers, sendToApp);

  function sendToApp(msg, viewMetadata) {
    var pair = A2(update, msg, model);
    stepper((model = pair.bp), viewMetadata);
    _Platform_enqueueEffects(managers, pair.ba, subscriptions(model));
  }

  _Platform_enqueueEffects(managers, initPair.ba, subscriptions(model));

  return ports ? { ports: ports } : {};
}

// TRACK PRELOADS
//
// This is used by code in gren/browser and gren/http
// to register any HTTP requests that are triggered by init.
//

var _Platform_preload;

function _Platform_registerPreload(url) {
  _Platform_preload.add(url);
}

// EFFECT MANAGERS

var _Platform_effectManagers = {};

function _Platform_setupEffects(managers, sendToApp) {
  var ports;

  // setup all necessary effect managers
  for (var key in _Platform_effectManagers) {
    var manager = _Platform_effectManagers[key];

    if (manager.a) {
      ports = ports || {};
      ports[key] = manager.a(key, sendToApp);
    }

    managers[key] = _Platform_instantiateManager(manager, sendToApp);
  }

  return ports;
}

function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
  return {
    b: init,
    c: onEffects,
    d: onSelfMsg,
    e: cmdMap,
    f: subMap,
  };
}

function _Platform_instantiateManager(info, sendToApp) {
  var router = {
    g: sendToApp,
    h: undefined,
  };

  var onEffects = info.c;
  var onSelfMsg = info.d;
  var cmdMap = info.e;
  var subMap = info.f;

  function loop(state) {
    return A2(
      _Scheduler_andThen,
      loop,
      _Scheduler_receive(function (msg) {
        var value = msg.a;

        if (msg.$ === 0) {
          return A3(onSelfMsg, router, value, state);
        }

        return cmdMap && subMap
          ? A4(onEffects, router, value.i, value.j, state)
          : A3(onEffects, router, cmdMap ? value.i : value.j, state);
      }),
    );
  }

  return (router.h = _Scheduler_rawSpawn(
    A2(_Scheduler_andThen, loop, info.b),
  ));
}

// ROUTING

var _Platform_sendToApp = F2(function (router, msg) {
  return _Scheduler_binding(function (callback) {
    router.g(msg);
    callback(_Scheduler_succeed({}));
  });
});

var _Platform_sendToSelf = F2(function (router, msg) {
  return A2(_Scheduler_send, router.h, {
    $: 0,
    a: msg,
  });
});

// BAGS

function _Platform_leaf(home) {
  return function (value) {
    return {
      $: 1,
      k: home,
      l: value,
    };
  };
}

function _Platform_batch(array) {
  return {
    $: 2,
    m: array,
  };
}

var _Platform_map = F2(function (tagger, bag) {
  return {
    $: 3,
    n: tagger,
    o: bag,
  };
});

// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/gren/core/issues/980
//   https://github.com/gren/core/pull/981
//   https://github.com/gren/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.

// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;

function _Platform_enqueueEffects(managers, cmdBag, subBag) {
  _Platform_effectsQueue.push({
    p: managers,
    q: cmdBag,
    r: subBag,
  });

  if (_Platform_effectsActive) return;

  _Platform_effectsActive = true;
  for (var fx; (fx = _Platform_effectsQueue.shift()); ) {
    _Platform_dispatchEffects(fx.p, fx.q, fx.r);
  }
  _Platform_effectsActive = false;
}

function _Platform_dispatchEffects(managers, cmdBag, subBag) {
  var effectsDict = {};
  _Platform_gatherEffects(true, cmdBag, effectsDict, null);
  _Platform_gatherEffects(false, subBag, effectsDict, null);

  for (var home in managers) {
    _Scheduler_rawSend(managers[home], {
      $: "fx",
      a: effectsDict[home] || { i: [], j: [] },
    });
  }
}

function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
  switch (bag.$) {
    case 1:
      var home = bag.k;
      var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
      effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
      return;

    case 2:
      var bags = bag.m;
      for (var idx = 0; idx < bags.length; idx++) {
        _Platform_gatherEffects(isCmd, bags[idx], effectsDict, taggers);
      }
      return;

    case 3:
      _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
        s: bag.n,
        t: taggers,
      });
      return;
  }
}

function _Platform_toEffect(isCmd, home, taggers, value) {
  function applyTaggers(x) {
    for (var temp = taggers; temp; temp = temp.t) {
      x = temp.s(x);
    }
    return x;
  }

  var map = isCmd
    ? _Platform_effectManagers[home].e
    : _Platform_effectManagers[home].f;

  return A2(map, applyTaggers, value);
}

function _Platform_insert(isCmd, newEffect, effects) {
  effects = effects || { i: [], j: [] };

  isCmd
    ? (effects.i = A2($gren_lang$core$Array$pushLast, newEffect, effects.i))
    : (effects.j = A2($gren_lang$core$Array$pushLast, newEffect, effects.j));

  return effects;
}

// PORTS

function _Platform_checkPortName(name) {
  if (_Platform_effectManagers[name]) {
    _Debug_crash(3, name);
  }
}

// OUTGOING PORTS

function _Platform_outgoingPort(name, converter) {
  _Platform_checkPortName(name);
  _Platform_effectManagers[name] = {
    e: _Platform_outgoingPortMap,
    u: converter,
    a: _Platform_setupOutgoingPort,
  };
  return _Platform_leaf(name);
}

var _Platform_outgoingPortMap = F2(function (tagger, value) {
  return value;
});

function _Platform_setupOutgoingPort(name) {
  var subs = [];
  var converter = _Platform_effectManagers[name].u;

  // CREATE MANAGER

  var init = _Process_sleep(0);

  _Platform_effectManagers[name].b = init;
  _Platform_effectManagers[name].c = F3(
    function (router, cmdArray, state) {
      for (var idx = 0; idx < cmdArray.length; idx++) {
        // grab a separate reference to subs in case unsubscribe is called
        var currentSubs = subs;
        var value = _Json_unwrap(converter(cmdArray[idx]));
        for (var subIdx = 0; subIdx < currentSubs.length; subIdx++) {
          currentSubs[subIdx](value);
        }
      }
      return init;
    },
  );

  // PUBLIC API

  function subscribe(callback) {
    subs.push(callback);
  }

  function unsubscribe(callback) {
    // copy subs into a new array in case unsubscribe is called within a
    // subscribed callback
    subs = subs.slice();
    var index = subs.indexOf(callback);
    if (index >= 0) {
      subs.splice(index, 1);
    }
  }

  return {
    subscribe: subscribe,
    unsubscribe: unsubscribe,
  };
}

// INCOMING PORTS

function _Platform_incomingPort(name, converter) {
  _Platform_checkPortName(name);
  _Platform_effectManagers[name] = {
    f: _Platform_incomingPortMap,
    u: converter,
    a: _Platform_setupIncomingPort,
  };
  return _Platform_leaf(name);
}

var _Platform_incomingPortMap = F2(function (tagger, finalTagger) {
  return function (value) {
    return tagger(finalTagger(value));
  };
});

function _Platform_setupIncomingPort(name, sendToApp) {
  var subs = [];
  var converter = _Platform_effectManagers[name].u;

  // CREATE MANAGER

  var init = _Scheduler_succeed(null);

  _Platform_effectManagers[name].b = init;
  _Platform_effectManagers[name].c = F3(
    function (router, subArray, state) {
      subs = subArray;
      return init;
    },
  );

  // PUBLIC API

  function send(incomingValue) {
    var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

    $gren_lang$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

    var value = result.a;
    for (var idx = 0; idx < subs.length; idx++) {
      sendToApp(subs[idx](value));
    }
  }

  return { send: send };
}

// EXPORT GREN MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//

function _Platform_export(exports) {
  scope["Gren"]
    ? _Platform_mergeExportsProd(scope["Gren"], exports)
    : (scope["Gren"] = exports);
}

function _Platform_mergeExportsProd(obj, exports) {
  for (var name in exports) {
    name in obj
      ? name == "init"
        ? _Debug_crash(6)
        : _Platform_mergeExportsProd(obj[name], exports[name])
      : (obj[name] = exports[name]);
  }
}

function _Platform_export_UNUSED(exports) {
  scope["Gren"]
    ? _Platform_mergeExportsDebug("Gren", scope["Gren"], exports)
    : (scope["Gren"] = exports);
}

function _Platform_mergeExportsDebug(moduleName, obj, exports) {
  for (var name in exports) {
    name in obj
      ? name == "init"
        ? _Debug_crash(6, moduleName)
        : _Platform_mergeExportsDebug(
            moduleName + "." + name,
            obj[name],
            exports[name],
          )
      : (obj[name] = exports[name]);
  }
}


// LOG

var _Debug_log = F2(function (tag, value) {
  return value;
});

var _Debug_log_UNUSED = F2(function (tag, value) {
  console.log(tag + ": " + _Debug_toString(value));
  return value;
});

// TODOS

function _Debug_todo(moduleName, region) {
  return function (message) {
    _Debug_crash(8, moduleName, region, message);
  };
}

function _Debug_todoCase(moduleName, region, value) {
  return function (message) {
    _Debug_crash(9, moduleName, region, value, message);
  };
}

// TO STRING

function _Debug_toString(value) {
  return "<internals>";
}

function _Debug_toString_UNUSED(value) {
  return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value) {
  if (value == null) {
    return _Debug_internalColor(ansi, "<null>");
  }

  if (typeof value === "function") {
    return _Debug_internalColor(ansi, "<function>");
  }

  if (typeof value === "boolean") {
    return _Debug_ctorColor(ansi, value ? "True" : "False");
  }

  if (typeof value === "number") {
    return _Debug_numberColor(ansi, value + "");
  }

  if (value instanceof String) {
    return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
  }

  if (typeof value === "string") {
    return _Debug_stringColor(
      ansi,
      '"' + _Debug_addSlashes(value, false) + '"',
    );
  }

  if (Array.isArray(value)) {
    var output = "[";

    value.length > 0 && (output += _Debug_toAnsiString(ansi, value[0]));

    for (var idx = 1; idx < value.length; idx++) {
      output += ", " + _Debug_toAnsiString(ansi, value[idx]);
    }

    return output + "]";
  }

  if (typeof value === "object" && "$" in value) {
    var tag = value.$;

    if (typeof tag === "number") {
      return _Debug_internalColor(ansi, "<internals>");
    }

    if (tag === "Set_gren_builtin") {
      return (
        _Debug_ctorColor(ansi, "Set") +
        _Debug_fadeColor(ansi, ".fromArray") +
        " " +
        _Debug_toAnsiString(ansi, $gren_lang$core$Set$toArray(value))
      );
    }

    if (tag === "RBNode_gren_builtin" || tag === "RBEmpty_gren_builtin") {
      return (
        _Debug_ctorColor(ansi, "Dict") +
        _Debug_fadeColor(ansi, ".fromArray") +
        " " +
        _Debug_toAnsiString(
          ansi,
          A3(
            $gren_lang$core$Dict$foldl,
            F3(function (key, value, acc) {
              acc.push({ key: key, value: value });
              return acc;
            }),
            [],
            value,
          ),
        )
      );
    }

    var output = "";
    for (var i in value) {
      if (i === "$") continue;
      var str = _Debug_toAnsiString(ansi, value[i]);
      var c0 = str[0];
      var parenless =
        c0 === "{" ||
        c0 === "(" ||
        c0 === "[" ||
        c0 === "<" ||
        c0 === '"' ||
        str.indexOf(" ") < 0;
      output += " " + (parenless ? str : "(" + str + ")");
    }
    return _Debug_ctorColor(ansi, tag) + output;
  }

  if (typeof DataView === "function" && value instanceof DataView) {
    return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
  }

  if (typeof File !== "undefined" && value instanceof File) {
    return _Debug_internalColor(ansi, "<" + value.name + ">");
  }

  if (
    typeof _Array_Builder !== "undefined" &&
    value instanceof _Array_Builder
  ) {
    return _Debug_toAnsiString(ansi, value.W.slice(0, value.aB));
  }

  if (typeof value === "object") {
    var output = [];
    for (var key in value) {
      var field = key[0] === "_" ? key.slice(1) : key;
      output.push(
        _Debug_fadeColor(ansi, field) +
          " = " +
          _Debug_toAnsiString(ansi, value[key]),
      );
    }
    if (output.length === 0) {
      return "{}";
    }
    return "{ " + output.join(", ") + " }";
  }

  return _Debug_internalColor(ansi, "<internals>");
}

function _Debug_addSlashes(str, isChar) {
  var s = str
    .replace(/\\/g, "\\\\")
    .replace(/\n/g, "\\n")
    .replace(/\t/g, "\\t")
    .replace(/\r/g, "\\r")
    .replace(/\v/g, "\\v")
    .replace(/\0/g, "\\0");

  if (isChar) {
    return s.replace(/\'/g, "\\'");
  } else {
    return s.replace(/\"/g, '\\"');
  }
}

function _Debug_ctorColor(ansi, string) {
  return ansi ? "\x1b[96m" + string + "\x1b[0m" : string;
}

function _Debug_numberColor(ansi, string) {
  return ansi ? "\x1b[95m" + string + "\x1b[0m" : string;
}

function _Debug_stringColor(ansi, string) {
  return ansi ? "\x1b[93m" + string + "\x1b[0m" : string;
}

function _Debug_charColor(ansi, string) {
  return ansi ? "\x1b[92m" + string + "\x1b[0m" : string;
}

function _Debug_fadeColor(ansi, string) {
  return ansi ? "\x1b[37m" + string + "\x1b[0m" : string;
}

function _Debug_internalColor(ansi, string) {
  return ansi ? "\x1b[36m" + string + "\x1b[0m" : string;
}

function _Debug_toHexDigit(n) {
  return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}

// CRASH

function _Debug_crash(identifier) {
  throw new Error(
    "https://github.com/gren-lang/core/blob/1.0.0/hints/" + identifier + ".md",
  );
}

function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
  switch (identifier) {
    case 0:
      throw new Error(
        'What node should I take over? In JavaScript I need something like:\n\n    Gren.Main.init({\n        node: document.getElementById("gren-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.',
      );

    case 1:
      throw new Error(
        "Browser.application programs cannot handle URLs like this:\n\n    " +
          document.location.href +
          "\n\nWhat is the root? The root of your file system?",
      );

    case 2:
      var jsonErrorString = fact1;
      throw new Error(
        "Problem with the flags given to your Gren program on initialization.\n\n" +
          jsonErrorString,
      );

    case 3:
      var portName = fact1;
      throw new Error(
        "There can only be one port named `" +
          portName +
          "`, but your program has multiple.",
      );

    case 4:
      var portName = fact1;
      var problem = fact2;
      throw new Error(
        "Trying to send an unexpected type of value through port `" +
          portName +
          "`:\n" +
          problem,
      );

    case 5:
      throw new Error(
        'Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Gren sense.\nRead more about this at https://package.gren-lang.org/packages/gren-lang/core/latest/Basics#== which describes why it is this way and what the better version will look like.',
      );

    case 6:
      var moduleName = fact1;
      throw new Error(
        "Your page is loading multiple Gren scripts with a module named " +
          moduleName +
          ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!",
      );

    case 8:
      var moduleName = fact1;
      var region = fact2;
      var message = fact3;
      throw new Error(
        "TODO in module `" +
          moduleName +
          "` " +
          _Debug_regionToString(region) +
          "\n\n" +
          message,
      );

    case 9:
      var moduleName = fact1;
      var region = fact2;
      var value = fact3;
      var message = fact4;
      throw new Error(
        "TODO in module `" +
          moduleName +
          "` from the `case` expression " +
          _Debug_regionToString(region) +
          "\n\nIt received the following value:\n\n    " +
          _Debug_toString(value).replace("\n", "\n    ") +
          "\n\nBut the branch that handles it says:\n\n    " +
          message.replace("\n", "\n    "),
      );

    case 10:
      throw new Error("Bug in https://github.com/gren-lang/core/issues");

    case 11:
      throw new Error("Cannot perform mod 0. Division by zero error.");
  }
}

function _Debug_regionToString(region) {
  if (region.aY.af === region.bd.af) {
    return "on line " + region.aY.af;
  }
  return (
    "on lines " + region.aY.af + " through " + region.bd.af
  );
}
var $gren_lang$core$Dict$foldl$ = function(func, acc, dict) {
	foldl:
	while (true) {
		if (dict.$ === -2) {
			return acc;
		} else {
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			var $temp$func = func,
			$temp$acc = A3(func, key, value, $gren_lang$core$Dict$foldl$(func, acc, left)),
			$temp$dict = right;
			func = $temp$func;
			acc = $temp$acc;
			dict = $temp$dict;
			continue foldl;
		}
	}
};
var $gren_lang$core$Dict$foldl = F3($gren_lang$core$Dict$foldl$);


var _Array_length = function (array) {
  return array.length;
};

var _Array_initialize = F3(function (size, offset, func) {
  var result = new Array(size);

  for (var i = 0; i < size; i++) {
    result[i] = func(offset + i);
  }

  return result;
});

var _Array_get = F2(function (index, array) {
  var value = array.at(index);

  if (typeof value === "undefined") {
    return $gren_lang$core$Maybe$Nothing;
  }

  return $gren_lang$core$Maybe$Just(value);
});

var _Array_set = F3(function (index, value, array) {
  try {
    return array.with(index, value);
  } catch (e) {
    // assuming RangeError
    return array;
  }
});

var _Array_splice0 = F3(function (index, toRemove, array) {
  return array.toSpliced(index, toRemove);
});

var _Array_splice1 = F4(function (index, toRemove, toAdd, array) {
  return array.toSpliced(index, toRemove, toAdd);
});

var _Array_spliceN = F4(function (index, toRemove, toAdd, array) {
  return array.toSpliced(index, toRemove, ...toAdd);
});

var _Array_foldl = F3(function (func, acc, array) {
  for (var i = 0; i < array.length; i++) {
    acc = A2(func, array[i], acc);
  }

  return acc;
});

var _Array_foldr = F3(function (func, acc, array) {
  for (var i = array.length - 1; i >= 0; i--) {
    acc = A2(func, array[i], acc);
  }

  return acc;
});

var _Array_indexedFoldl = F3(function (func, acc, array) {
  for (var i = 0; i < array.length; i++) {
    acc = A3(func, i, array[i], acc);
  }

  return acc;
});

var _Array_indexedFoldr = F3(function (func, acc, array) {
  for (var i = array.length - 1; i >= 0; i--) {
    acc = A3(func, i, array[i], acc);
  }

  return acc;
});

var _Array_map = F2(function (func, array) {
  return array.map(func);
});

var _Array_indexedMap = F2(function (func, array) {
  return array.map(function (value, index) {
    return A2(func, index, value);
  });
});

var _Array_filter = F2(function (func, array) {
  return array.filter(func);
});

var _Array_flat = function (array) {
  return array.flat();
};

var _Array_flatMap = F2(function (func, array) {
  return array.flatMap(func);
});

var _Array_slice = F3(function (from, to, array) {
  return array.slice(from, to);
});

var _Array_append = F2(function (left, right) {
  return left.concat(right);
});

var _Array_reverse = function (array) {
  return array.toReversed();
};

var _Array_findFirst = F2(function (pred, array) {
  for (var i = 0; i < array.length; i++) {
    var element = array[i];

    if (pred(element)) {
      return $gren_lang$core$Maybe$Just(element);
    }
  }

  return $gren_lang$core$Maybe$Nothing;
});

var _Array_findLast = F2(function (pred, array) {
  for (var i = array.length - 1; i >= 0; i--) {
    var element = array[i];

    if (pred(element)) {
      return $gren_lang$core$Maybe$Just(element);
    }
  }

  return $gren_lang$core$Maybe$Nothing;
});

var _Array_map2 = F3(function (fn, as, bs) {
  var result = [];
  var lowestLength = as.length < bs.length ? as.length : bs.length;

  for (var i = 0; i < lowestLength; i++) {
    result.push(A2(fn, as[i], bs[i]));
  }

  return result;
});

var _Array_map3 = F4(function (fn, as, bs, cs) {
  var result = [];
  var lowestLength = [as.length, bs.length, cs.length].sort()[0];

  for (var i = 0; i < lowestLength; i++) {
    result.push(A3(fn, as[i], bs[i], cs[i]));
  }

  return result;
});

var _Array_sort = function (array) {
  return array.toSorted(function (a, b) {
    return _Utils_cmp(a, b);
  });
};

var _Array_sortBy = F2(function (fn, array) {
  return array.toSorted(function (a, b) {
    return _Utils_cmp(fn(a), fn(b));
  });
});

var _Array_sortWith = F2(function (fn, array) {
  return array.toSorted(function (a, b) {
    var ord = A2(fn, a, b);
    return ord === $gren_lang$core$Basics$EQ ? 0 : ord === $gren_lang$core$Basics$LT ? -1 : 1;
  });
});

class _Array_Builder {
  constructor(target, finalized, array) {
    this.aB = target;
    this._ = finalized;
    this.W = array;
  }
}

var _Array_emptyBuilder = function (capacity) {
  return new _Array_Builder(0, false, new Array(capacity));
};

var _Array_pushToBuilder = F2(function (value, builder) {
  var array = builder.W;
  var target = builder.aB;

  if (builder._) {
    array = array.slice(0, target);
  } else {
    builder._ = true;
  }

  if (target < array.length) {
    array[target] = value;
  } else {
    array.push(value);
  }

  return new _Array_Builder(target + 1, false, array);
});

var _Array_appendToBuilder = F2(function (array, builder) {
  var newArray = _Array_fromBuilder(builder);

  for (var i = 0; i < array.length; i++) {
    newArray.push(array[i]);
  }

  return new _Array_Builder(newArray.length, false, newArray);
});

var _Array_toBuilder = function (array) {
  return new _Array_Builder(array.length, true, array);
};

var _Array_fromBuilder = function (builder) {
  var result = builder.W;

  if (builder._) {
    result = result.slice(0, builder.aB);
  } else {
    builder._ = true;
    result.length = builder.aB;
  }

  return result;
};


// EQUALITY

function _Utils_eq(x, y) {
  for (
    var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
    isEqual && (pair = stack.pop());
    isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
  ) {}

  return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack) {
  if (x === y) {
    return true;
  }

  if (typeof x !== "object" || x === null || y === null) {
    typeof x === "function" && _Debug_crash(5);
    return false;
  }

  if (depth > 100) {
    stack.push({ a: x, b: y });
    return true;
  }

  /**_UNUSED/
	if (x.$ === 'Set_gren_builtin')
	{
		x = $gren_lang$core$Set$toArray(x);
		y = $gren_lang$core$Set$toArray(y);
	}
	if (x.$ === 'RBNode_gren_builtin' || x.$ === 'RBEmpty_gren_builtin')
	{
		x = A3($gren_lang$core$Dict$foldl, F3(function(key, value, acc) { acc.push({ a: key, b: value }); return acc; }), [], x);
		y = A3($gren_lang$core$Dict$foldl, F3(function(key, value, acc) { acc.push({ a: key, b: value }); return acc; }), [], y);
	}
	//*/

  /**/
	if (x.$ < 0)
	{
		x = A3($gren_lang$core$Dict$foldl, F3(function(key, value, acc) { acc.push({ a: key, b: value }); return acc; }), [], x);
		y = A3($gren_lang$core$Dict$foldl, F3(function(key, value, acc) { acc.push({ a: key, b: value }); return acc; }), [], y);
	}
	//*/

  if (x instanceof DataView) {
    var length = x.byteLength;

    if (y.byteLength !== length) {
      return false;
    }

    for (var i = 0; i < length; ++i) {
      if (x.getUint8(i) !== y.getUint8(i)) {
        return false;
      }
    }
  }

  if (x instanceof _Array_Builder) {
    x = _Array_fromBuilder(x);
    y = _Array_fromBuilder(y);
  }

  if (Array.isArray(x) && x.length !== y.length) {
    return false;
  }

  var nextDepth = depth + 1;

  for (var key in x) {
    if (!_Utils_eqHelp(x[key], y[key], nextDepth, stack)) {
      return false;
    }
  }

  return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function (a, b) {
  return !_Utils_eq(a, b);
});

// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y) {
  if (typeof x !== "object") {
    return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
  }

  /**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

  // At this point, we can only be comparing arrays
  for (var idx = 0; idx < x.length; idx++) {
    var ord = _Utils_cmp(x[idx], y[idx]);
    if (ord !== 0) return ord;
  }

  return x.length - y.length;
}

var _Utils_lt = F2(function (a, b) {
  return _Utils_cmp(a, b) < 0;
});
var _Utils_le = F2(function (a, b) {
  return _Utils_cmp(a, b) < 1;
});
var _Utils_gt = F2(function (a, b) {
  return _Utils_cmp(a, b) > 0;
});
var _Utils_ge = F2(function (a, b) {
  return _Utils_cmp(a, b) >= 0;
});

var _Utils_compare = F2(function (x, y) {
  var n = _Utils_cmp(x, y);
  return n < 0 ? $gren_lang$core$Basics$LT : n ? $gren_lang$core$Basics$GT : $gren_lang$core$Basics$EQ;
});

// COMMON VALUES

function _Utils_chr(c) {
  return c;
}
function _Utils_chr_UNUSED(c) {
  return new String(c);
}

// RECORDS

function _Utils_update(oldRecord, updatedFields) {
  var newRecord = {};

  for (var key in oldRecord) {
    newRecord[key] = oldRecord[key];
  }

  for (var key in updatedFields) {
    newRecord[key] = updatedFields[key];
  }

  return newRecord;
}

// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys) {
  // append Strings
  if (typeof xs === "string") {
    return xs + ys;
  }

  return xs.concat(ys);
}
var $gren_lang$core$Basics$EQ = 1;
var $gren_lang$core$Basics$GT = 2;
var $gren_lang$core$Basics$LT = 0;
var $gren_lang$core$Maybe$Just = function (a) {
	return { $: 0, a: a };
};
var $gren_lang$core$Maybe$Nothing = { $: 1 };
var $gren_lang$core$Array$length = _Array_length;
var $gren_lang$core$Array$pushLast$ = function(value, array) {
	return A4(_Array_splice1, $gren_lang$core$Array$length(array), 0, value, array);
};
var $gren_lang$core$Array$pushLast = F2($gren_lang$core$Array$pushLast$);
var $gren_lang$core$Dict$keys = function(dict) {
	return $gren_lang$core$Dict$foldl$(F3(function(key, value, keyArray) {
				return $gren_lang$core$Array$pushLast$(key, keyArray);
			}), [  ], dict);
};
var $gren_lang$core$Set$toArray = function(_v0) {
	var dict = _v0;
	return $gren_lang$core$Dict$keys(dict);
};


/**_UNUSED/
function _Json_errorToString(error)
{
	return $gren_lang$core$Json$Decode$errorToString(error);
}
//*/

// CORE DECODERS

function _Json_succeed(msg) {
  return {
    $: 0,
    a: msg,
  };
}

function _Json_fail(msg) {
  return {
    $: 1,
    a: msg,
  };
}

function _Json_decodePrim(decoder) {
  return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function (value) {
  return typeof value !== "number"
    ? _Json_expecting("an INT", value)
    : Math.trunc(value) === value
      ? $gren_lang$core$Result$Ok(value)
      : isFinite(value) && !(value % 1)
        ? $gren_lang$core$Result$Ok(value)
        : _Json_expecting("an INT", value);
});

var _Json_decodeBool = _Json_decodePrim(function (value) {
  return typeof value === "boolean"
    ? $gren_lang$core$Result$Ok(value)
    : _Json_expecting("a BOOL", value);
});

var _Json_decodeFloat = _Json_decodePrim(function (value) {
  return typeof value === "number"
    ? $gren_lang$core$Result$Ok(value)
    : _Json_expecting("a FLOAT", value);
});

var _Json_decodeValue = _Json_decodePrim(function (value) {
  return $gren_lang$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function (value) {
  return typeof value === "string"
    ? $gren_lang$core$Result$Ok(value)
    : value instanceof String
      ? $gren_lang$core$Result$Ok(value + "")
      : _Json_expecting("a STRING", value);
});

function _Json_decodeArray(decoder) {
  return { $: 3, b: decoder };
}

function _Json_decodeNull(value) {
  return { $: 4, c: value };
}

var _Json_decodeField = F2(function (field, decoder) {
  return {
    $: 5,
    d: field,
    b: decoder,
  };
});

var _Json_decodeIndex = F2(function (index, decoder) {
  return {
    $: 6,
    e: index,
    b: decoder,
  };
});

function _Json_decodeKeyValuePairs(decoder) {
  return {
    $: 7,
    b: decoder,
  };
}

function _Json_mapMany(f, decoders) {
  return {
    $: 8,
    f: f,
    g: decoders,
  };
}

var _Json_andThen = F2(function (callback, decoder) {
  return {
    $: 9,
    b: decoder,
    h: callback,
  };
});

function _Json_oneOf(decoders) {
  return {
    $: 10,
    g: decoders,
  };
}

// DECODING OBJECTS

var _Json_map1 = F2(function (f, d1) {
  return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function (f, d1, d2) {
  return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function (f, d1, d2, d3) {
  return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function (f, d1, d2, d3, d4) {
  return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function (f, d1, d2, d3, d4, d5) {
  return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function (f, d1, d2, d3, d4, d5, d6) {
  return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function (f, d1, d2, d3, d4, d5, d6, d7) {
  return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function (f, d1, d2, d3, d4, d5, d6, d7, d8) {
  return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});

// DECODE

var _Json_runOnString = F2(function (decoder, string) {
  try {
    var value = JSON.parse(string);
    return _Json_runHelp(decoder, value);
  } catch (e) {
    return $gren_lang$core$Result$Err(
      A2(
        $gren_lang$core$Json$Decode$Failure,
        "This is not valid JSON! " + e.message,
        _Json_wrap(string),
      ),
    );
  }
});

var _Json_run = F2(function (decoder, value) {
  return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value) {
  switch (decoder.$) {
    case 2:
      return decoder.b(value);

    case 4:
      return value === null
        ? $gren_lang$core$Result$Ok(decoder.c)
        : _Json_expecting("null", value);

    case 3:
      if (!_Json_isArray(value)) {
        return _Json_expecting("an ARRAY", value);
      }
      return _Json_runArrayDecoder(decoder.b, value);

    case 5:
      var field = decoder.d;
      if (typeof value !== "object" || value === null || !(field in value)) {
        return _Json_expecting(
          "an OBJECT with a field named `" + field + "`",
          value,
        );
      }
      var result = _Json_runHelp(decoder.b, value[field]);
      return $gren_lang$core$Result$isOk(result)
        ? result
        : $gren_lang$core$Result$Err(A2($gren_lang$core$Json$Decode$Field, field, result.a));

    case 6:
      var index = decoder.e;
      if (!_Json_isArray(value)) {
        return _Json_expecting("an ARRAY", value);
      }
      if (index >= value.length) {
        return _Json_expecting(
          "a LONGER array. Need index " +
            index +
            " but only see " +
            value.length +
            " entries",
          value,
        );
      }
      var result = _Json_runHelp(decoder.b, value[index]);
      return $gren_lang$core$Result$isOk(result)
        ? result
        : $gren_lang$core$Result$Err(A2($gren_lang$core$Json$Decode$Index, index, result.a));

    case 7:
      if (typeof value !== "object" || value === null || _Json_isArray(value)) {
        return _Json_expecting("an OBJECT", value);
      }

      var keyValuePairs = [];
      for (var key in value) {
        if (value.hasOwnProperty(key)) {
          var result = _Json_runHelp(decoder.b, value[key]);
          if (!$gren_lang$core$Result$isOk(result)) {
            return $gren_lang$core$Result$Err(A2($gren_lang$core$Json$Decode$Field, key, result.a));
          }
          keyValuePairs.push({ ac: key, f: result.a });
        }
      }
      return $gren_lang$core$Result$Ok(keyValuePairs);

    case 8:
      var answer = decoder.f;
      var decoders = decoder.g;
      for (var i = 0; i < decoders.length; i++) {
        var result = _Json_runHelp(decoders[i], value);
        if (!$gren_lang$core$Result$isOk(result)) {
          return result;
        }
        answer = answer(result.a);
      }
      return $gren_lang$core$Result$Ok(answer);

    case 9:
      var result = _Json_runHelp(decoder.b, value);
      return !$gren_lang$core$Result$isOk(result)
        ? result
        : _Json_runHelp(decoder.h(result.a), value);

    case 10:
      var errors = [];

      var decoders = decoder.g;
      for (var idx = 0; idx < decoders.length; idx++) {
        var result = _Json_runHelp(decoders[idx], value);
        if ($gren_lang$core$Result$isOk(result)) {
          return result;
        }
        errors.push(result.a);
      }

      return $gren_lang$core$Result$Err($gren_lang$core$Json$Decode$OneOf(errors));

    case 1:
      return $gren_lang$core$Result$Err(A2($gren_lang$core$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

    case 0:
      return $gren_lang$core$Result$Ok(decoder.a);
  }
}

function _Json_runArrayDecoder(decoder, value) {
  var len = value.length;
  var array = new Array(len);
  for (var i = 0; i < len; i++) {
    var result = _Json_runHelp(decoder, value[i]);
    if (!$gren_lang$core$Result$isOk(result)) {
      return $gren_lang$core$Result$Err(A2($gren_lang$core$Json$Decode$Index, i, result.a));
    }
    array[i] = result.a;
  }
  return $gren_lang$core$Result$Ok(array);
}

function _Json_isArray(value) {
  return (
    Array.isArray(value) ||
    (typeof FileList !== "undefined" && value instanceof FileList)
  );
}

function _Json_expecting(type, value) {
  return $gren_lang$core$Result$Err(
    A2($gren_lang$core$Json$Decode$Failure, "Expecting " + type, _Json_wrap(value)),
  );
}

// EQUALITY

function _Json_equality(x, y) {
  if (x === y) {
    return true;
  }

  if (x.$ !== y.$) {
    return false;
  }

  switch (x.$) {
    case 0:
    case 1:
      return x.a === y.a;

    case 2:
      return x.b === y.b;

    case 4:
      return x.c === y.c;

    case 3:
    case 7:
      return _Json_equality(x.b, y.b);

    case 5:
      return (
        x.d === y.d && _Json_equality(x.b, y.b)
      );

    case 6:
      return (
        x.e === y.e && _Json_equality(x.b, y.b)
      );

    case 8:
      return (
        x.f === y.f && _Json_arrayEquality(x.g, y.g)
      );

    case 9:
      return (
        x.h === y.h &&
        _Json_equality(x.b, y.b)
      );

    case 10:
      return _Json_arrayEquality(x.g, y.g);
  }
}

function _Json_arrayEquality(aDecoders, bDecoders) {
  var len = aDecoders.length;
  if (len !== bDecoders.length) {
    return false;
  }
  for (var i = 0; i < len; i++) {
    if (!_Json_equality(aDecoders[i], bDecoders[i])) {
      return false;
    }
  }
  return true;
}

// ENCODE

var _Json_encode = F2(function (indentLevel, value) {
  return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
});

function _Json_wrap_UNUSED(value) {
  return { $: 0, a: value };
}
function _Json_unwrap_UNUSED(value) {
  return value.a;
}

function _Json_wrap(value) {
  return value;
}
function _Json_unwrap(value) {
  return value;
}

function _Json_emptyArray() {
  return [];
}
function _Json_emptyObject() {
  return {};
}

var _Json_addField = F3(function (key, value, object) {
  object[key] = _Json_unwrap(value);
  return object;
});

function _Json_addEntry(func) {
  return F2(function (entry, array) {
    array.push(_Json_unwrap(func(entry)));
    return array;
  });
}

var _Json_encodeNull = _Json_wrap(null);
var $gren_lang$core$Result$Err = function (a) {
	return { $: 1, a: a };
};
var $gren_lang$core$Json$Decode$Failure$ = function (a, b) {
	return { $: 3, a: a, b: b };
};
var $gren_lang$core$Json$Decode$Failure = F2($gren_lang$core$Json$Decode$Failure$);
var $gren_lang$core$Json$Decode$Field$ = function (a, b) {
	return { $: 0, a: a, b: b };
};
var $gren_lang$core$Json$Decode$Field = F2($gren_lang$core$Json$Decode$Field$);
var $gren_lang$core$Json$Decode$Index$ = function (a, b) {
	return { $: 1, a: a, b: b };
};
var $gren_lang$core$Json$Decode$Index = F2($gren_lang$core$Json$Decode$Index$);
var $gren_lang$core$Result$Ok = function (a) {
	return { $: 0, a: a };
};
var $gren_lang$core$Json$Decode$OneOf = function (a) {
	return { $: 2, a: a };
};
var $gren_lang$core$Basics$False = 1;


// MATH

var _Basics_add = F2(function (a, b) {
  return a + b;
});
var _Basics_sub = F2(function (a, b) {
  return a - b;
});
var _Basics_mul = F2(function (a, b) {
  return a * b;
});
var _Basics_fdiv = F2(function (a, b) {
  return a / b;
});
var _Basics_idiv = F2(function (a, b) {
  return Math.trunc(a / b);
});
var _Basics_pow = F2(Math.pow);

// MORE MATH

function _Basics_toFloat(x) {
  return x;
}
function _Basics_isInfinite(n) {
  return n === Infinity || n === -Infinity;
}

var _Basics_isNaN = isNaN;

// BOOLEANS

function _Basics_not(bool) {
  return !bool;
}
var _Basics_and = F2(function (a, b) {
  return a && b;
});
var _Basics_or = F2(function (a, b) {
  return a || b;
});
var _Basics_xor = F2(function (a, b) {
  return a !== b;
});
var $gren_lang$core$Basics$add = _Basics_add;


var _String_cons = F2(function (chr, str) {
  return chr + str;
});

function _String_uncons(string) {
  if (string.length <= 0) {
    return $gren_lang$core$Maybe$Nothing;
  }

  return $gren_lang$core$Maybe$Just({ first: _Utils_chr(string[0]), rest: string.slice(1) });
}

var _String_append = F2(function (a, b) {
  return a + b;
});

function _String_length(str) {
  return str.length;
}

var _String_map = F2(function (func, string) {
  var len = string.length;
  var array = new Array(len);
  var i = 0;
  while (i < len) {
    array[i] = func(_Utils_chr(string[i]));
    i++;
  }
  return array.join("");
});

var _String_filter = F2(function (isGood, str) {
  var arr = [];
  var len = str.length;
  var i = 0;
  while (i < len) {
    var char = str[i];
    i++;

    if (isGood(_Utils_chr(char))) {
      arr.push(char);
    }
  }
  return arr.join("");
});

function _String_reverse(str) {
  var len = str.length;
  var arr = new Array(len);
  var i = 0;
  while (i < len) {
    arr[len - i] = str[i];
    i++;
  }
  return arr.join("");
}

var _String_foldl = F3(function (func, state, string) {
  var len = string.length;
  var i = 0;
  while (i < len) {
    var char = string[i];
    state = A2(func, _Utils_chr(char), state);
    i++;
  }
  return state;
});

var _String_foldr = F3(function (func, state, string) {
  var i = string.length;
  while (i--) {
    var char = string[i];
    state = A2(func, _Utils_chr(char), state);
  }
  return state;
});

var _String_split = F2(function (sep, str) {
  return str.split(sep);
});

var _String_join = F2(function (sep, strs) {
  return strs.join(sep);
});

var _String_slice = F3(function (start, end, str) {
  return str.slice(start, end);
});

function _String_trim(str) {
  return str.trim();
}

function _String_trimLeft(str) {
  return str.replace(/^\s+/, "");
}

function _String_trimRight(str) {
  return str.replace(/\s+$/, "");
}

function _String_words(str) {
  return str.trim().split(/\s+/g);
}

function _String_lines(str) {
  return str.split(/\r\n|\r|\n/g);
}

function _String_toUpper(str) {
  return str.toUpperCase();
}

function _String_toLower(str) {
  return str.toLowerCase();
}

var _String_any = F2(function (isGood, string) {
  var i = string.length;
  while (i--) {
    var char = string[i];
    if (isGood(_Utils_chr(char))) {
      return true;
    }
  }
  return false;
});

var _String_all = F2(function (isGood, string) {
  var i = string.length;
  while (i--) {
    var char = string[i];
    if (!isGood(_Utils_chr(char))) {
      return false;
    }
  }
  return true;
});

var _String_contains = F2(function (sub, str) {
  return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function (sub, str) {
  return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function (sub, str) {
  return (
    str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length
  );
});

var _String_indexes = F2(function (sub, str) {
  var subLen = sub.length;

  if (subLen < 1) {
    return [];
  }

  var i = 0;
  var is = [];

  while ((i = str.indexOf(sub, i)) > -1) {
    is.push(i);
    i = i + subLen;
  }

  return is;
});

// TO STRING

function _String_fromNumber(number) {
  return number + "";
}

// INT CONVERSIONS

function _String_toInt(str) {
  var total = 0;
  var code0 = str.charCodeAt(0);
  var start = code0 == 0x2b /* + */ || code0 == 0x2d /* - */ ? 1 : 0;

  for (var i = start; i < str.length; ++i) {
    var code = str.charCodeAt(i);
    if (code < 0x30 || 0x39 < code) {
      return $gren_lang$core$Maybe$Nothing;
    }
    total = 10 * total + code - 0x30;
  }

  return i == start
    ? $gren_lang$core$Maybe$Nothing
    : $gren_lang$core$Maybe$Just(code0 == 0x2d ? -total : total);
}

// FLOAT CONVERSIONS

function _String_toFloat(s) {
  // check if it is a hex, octal, or binary number
  if (s.length === 0 || /[\sxbo]/.test(s)) {
    return $gren_lang$core$Maybe$Nothing;
  }
  var n = +s;
  // faster isNaN check
  return n === n ? $gren_lang$core$Maybe$Just(n) : $gren_lang$core$Maybe$Nothing;
}

function _String_fromArray(chars) {
  return chars.join("");
}
var $gren_lang$core$String$all = _String_all;
var $gren_lang$core$Basics$and = _Basics_and;
var $gren_lang$core$Basics$append = _Utils_append;
var $gren_lang$core$Json$Encode$encode = _Json_encode;
var $gren_lang$core$String$fromInt = _String_fromNumber;
var $gren_lang$core$String$join = _String_join;
var $gren_lang$core$String$split = _String_split;
var $gren_lang$core$Json$Decode$indent = function(str) {
	return A2($gren_lang$core$String$join, '\n    ', A2($gren_lang$core$String$split, '\n', str));
};
var $gren_lang$core$Array$indexedMap = _Array_indexedMap;
var $gren_lang$core$Basics$le = _Utils_le;


function _Char_toCode(char) {
  var code = char.charCodeAt(0);
  if (0xd800 <= code && code <= 0xdbff) {
    return (code - 0xd800) * 0x400 + char.charCodeAt(1) - 0xdc00 + 0x10000;
  }
  return code;
}

function _Char_fromCode(code) {
  return _Utils_chr(
    code < 0 || 0x10ffff < code
      ? "\uFFFD"
      : code <= 0xffff
        ? String.fromCharCode(code)
        : ((code -= 0x10000),
          String.fromCharCode(
            Math.floor(code / 0x400) + 0xd800,
            (code % 0x400) + 0xdc00,
          )),
  );
}

function _Char_toUpper(char) {
  return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char) {
  return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char) {
  return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char) {
  return _Utils_chr(char.toLocaleLowerCase());
}
var $gren_lang$core$Char$toCode = _Char_toCode;
var $gren_lang$core$Char$isLower = function(_char) {
	var code = $gren_lang$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $gren_lang$core$Char$isUpper = function(_char) {
	var code = $gren_lang$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $gren_lang$core$Basics$or = _Basics_or;
var $gren_lang$core$Char$isAlpha = function(_char) {
	return $gren_lang$core$Char$isLower(_char) || $gren_lang$core$Char$isUpper(_char);
};
var $gren_lang$core$Char$isDigit = function(_char) {
	var code = $gren_lang$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $gren_lang$core$Char$isAlphaNum = function(_char) {
	return $gren_lang$core$Char$isLower(_char) || ($gren_lang$core$Char$isUpper(_char) || $gren_lang$core$Char$isDigit(_char));
};
var $gren_lang$core$String$uncons = _String_uncons;
var $gren_lang$core$Json$Decode$errorOneOf$ = function(i, error) {
	return '\n\n(' + ($gren_lang$core$String$fromInt(i + 1) + (') ' + $gren_lang$core$Json$Decode$indent($gren_lang$core$Json$Decode$errorToString(error))));
};
var $gren_lang$core$Json$Decode$errorOneOf = F2($gren_lang$core$Json$Decode$errorOneOf$);
var $gren_lang$core$Json$Decode$errorToString = function(error) {
	return $gren_lang$core$Json$Decode$errorToStringHelp$(error, [  ]);
};
var $gren_lang$core$Json$Decode$errorToStringHelp$ = function(error, context) {
	errorToStringHelp:
	while (true) {
		switch (error.$) {
			case 0:
				var f = error.a;
				var err = error.b;
				var isSimple = function () {
					var _v1 = $gren_lang$core$String$uncons(f);
					if (_v1.$ === 1) {
						return false;
					} else {
						var _v2 = _v1.a;
						var _char = _v2.b0;
						var rest = _v2.cm;
						return $gren_lang$core$Char$isAlpha(_char) && A2($gren_lang$core$String$all, $gren_lang$core$Char$isAlphaNum, rest);
					}
				}();
				var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
				var $temp$error = err,
				$temp$context = _Utils_ap([ fieldName ], context);
				error = $temp$error;
				context = $temp$context;
				continue errorToStringHelp;
			case 1:
				var i = error.a;
				var err = error.b;
				var indexName = '[' + ($gren_lang$core$String$fromInt(i) + ']');
				var $temp$error = err,
				$temp$context = _Utils_ap([ indexName ], context);
				error = $temp$error;
				context = $temp$context;
				continue errorToStringHelp;
			case 2:
				var errors = error.a;
				switch (errors.length) {
					case 0:
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (context.length === 0) {
								return '!';
							} else {
								return ' at json' + A2($gren_lang$core$String$join, '', context);
							}
						}();
					case 1:
						var err = errors[0];
						var $temp$error = err,
						$temp$context = context;
						error = $temp$error;
						context = $temp$context;
						continue errorToStringHelp;
					default:
						var starter = function () {
							if (context.length === 0) {
								return 'Json.Decode.oneOf';
							} else {
								return 'The Json.Decode.oneOf at json' + A2($gren_lang$core$String$join, '', context);
							}
						}();
						var introduction = starter + (' failed in the following ' + ($gren_lang$core$String$fromInt($gren_lang$core$Array$length(errors)) + ' ways:'));
						return A2($gren_lang$core$String$join, '\n\n', _Utils_ap([ introduction ], A2($gren_lang$core$Array$indexedMap, $gren_lang$core$Json$Decode$errorOneOf, errors)));
				}
			default:
				var msg = error.a;
				var json = error.b;
				var introduction = function () {
					if (context.length === 0) {
						return 'Problem with the given value:\n\n';
					} else {
						return 'Problem with the value at json' + (A2($gren_lang$core$String$join, '', context) + ':\n\n    ');
					}
				}();
				return introduction + ($gren_lang$core$Json$Decode$indent(A2($gren_lang$core$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
		}
	}
};
var $gren_lang$core$Json$Decode$errorToStringHelp = F2($gren_lang$core$Json$Decode$errorToStringHelp$);
var $gren_lang$core$Basics$True = 0;
var $gren_lang$core$Result$isOk = function(result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};


function _Process_sleep(time) {
  return _Scheduler_binding(function (callback) {
    var id = setTimeout(function () {
      callback(_Scheduler_succeed({}));
    }, time);

    return function () {
      clearTimeout(id);
    };
  });
}
var $gren_lang$core$Dict$RBEmpty_gren_builtin = { $: -2 };
var $gren_lang$core$Dict$empty = $gren_lang$core$Dict$RBEmpty_gren_builtin;
var $gren_lang$core$Dict$Black = 1;
var $gren_lang$core$Dict$RBNode_gren_builtin$ = function (a, b, c, d, e) {
	return { $: -1, a: a, b: b, c: c, d: d, e: e };
};
var $gren_lang$core$Dict$RBNode_gren_builtin = F5($gren_lang$core$Dict$RBNode_gren_builtin$);
var $gren_lang$core$Dict$Red = 0;
var $gren_lang$core$Dict$balance$ = function(color, key, value, left, right) {
	if ((right.$ === -1) && (!right.a)) {
		var _v1 = right.a;
		var rK = right.b;
		var rV = right.c;
		var rLeft = right.d;
		var rRight = right.e;
		if ((left.$ === -1) && (!left.a)) {
			var _v3 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return $gren_lang$core$Dict$RBNode_gren_builtin$(0, key, value, $gren_lang$core$Dict$RBNode_gren_builtin$(1, lK, lV, lLeft, lRight), $gren_lang$core$Dict$RBNode_gren_builtin$(1, rK, rV, rLeft, rRight));
		} else {
			return $gren_lang$core$Dict$RBNode_gren_builtin$(color, rK, rV, $gren_lang$core$Dict$RBNode_gren_builtin$(0, key, value, left, rLeft), rRight);
		}
	} else {
		if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
			var _v5 = left.a;
			var lK = left.b;
			var lV = left.c;
			var _v6 = left.d;
			var _v7 = _v6.a;
			var llK = _v6.b;
			var llV = _v6.c;
			var llLeft = _v6.d;
			var llRight = _v6.e;
			var lRight = left.e;
			return $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, $gren_lang$core$Dict$RBNode_gren_builtin$(1, llK, llV, llLeft, llRight), $gren_lang$core$Dict$RBNode_gren_builtin$(1, key, value, lRight, right));
		} else {
			return $gren_lang$core$Dict$RBNode_gren_builtin$(color, key, value, left, right);
		}
	}
};
var $gren_lang$core$Dict$balance = F5($gren_lang$core$Dict$balance$);
var $gren_lang$core$Basics$compare = _Utils_compare;
var $gren_lang$core$Dict$setHelp$ = function(key, value, dict) {
	if (dict.$ === -2) {
		return $gren_lang$core$Dict$RBNode_gren_builtin$(0, key, value, $gren_lang$core$Dict$RBEmpty_gren_builtin, $gren_lang$core$Dict$RBEmpty_gren_builtin);
	} else {
		var nColor = dict.a;
		var nKey = dict.b;
		var nValue = dict.c;
		var nLeft = dict.d;
		var nRight = dict.e;
		var _v1 = A2($gren_lang$core$Basics$compare, key, nKey);
		switch (_v1) {
			case 0:
				return $gren_lang$core$Dict$balance$(nColor, nKey, nValue, $gren_lang$core$Dict$setHelp$(key, value, nLeft), nRight);
			case 1:
				return $gren_lang$core$Dict$RBNode_gren_builtin$(nColor, nKey, value, nLeft, nRight);
			default:
				return $gren_lang$core$Dict$balance$(nColor, nKey, nValue, nLeft, $gren_lang$core$Dict$setHelp$(key, value, nRight));
		}
	}
};
var $gren_lang$core$Dict$setHelp = F3($gren_lang$core$Dict$setHelp$);
var $gren_lang$core$Dict$set$ = function(key, value, dict) {
	var _v0 = $gren_lang$core$Dict$setHelp$(key, value, dict);
	if ((_v0.$ === -1) && (!_v0.a)) {
		var _v1 = _v0.a;
		var k = _v0.b;
		var v = _v0.c;
		var l = _v0.d;
		var r = _v0.e;
		return $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, l, r);
	} else {
		var x = _v0;
		return x;
	}
};
var $gren_lang$core$Dict$set = F3($gren_lang$core$Dict$set$);
var $gren_lang$node$Internal$Stream$Stream$ = function (a, b) {
	return { $: 0, a: a, b: b };
};
var $gren_lang$node$Internal$Stream$Stream = F2($gren_lang$node$Internal$Stream$Stream$);
var $gren_lang$node$Node$Arm = { $: 0 };
var $gren_lang$node$Node$Arm64 = { $: 1 };
var $gren_lang$node$Node$IA32 = { $: 2 };
var $gren_lang$node$Node$Mips = { $: 3 };
var $gren_lang$node$Node$Mipsel = { $: 4 };
var $gren_lang$node$Node$PPC = { $: 5 };
var $gren_lang$node$Node$PPC64 = { $: 6 };
var $gren_lang$node$Node$S390 = { $: 7 };
var $gren_lang$node$Node$S390x = { $: 8 };
var $gren_lang$node$Node$UnknownArchitecture = function (a) {
	return { $: 10, a: a };
};
var $gren_lang$node$Node$X64 = { $: 9 };
var $gren_lang$core$String$toLower = _String_toLower;
var $gren_lang$node$Node$archFromString = function(arch) {
	var _v0 = $gren_lang$core$String$toLower(arch);
	switch (_v0) {
		case 'arm':
			return $gren_lang$node$Node$Arm;
		case 'arm64':
			return $gren_lang$node$Node$Arm64;
		case 'ia32':
			return $gren_lang$node$Node$IA32;
		case 'mips':
			return $gren_lang$node$Node$Mips;
		case 'mipsel':
			return $gren_lang$node$Node$Mipsel;
		case 'ppc':
			return $gren_lang$node$Node$PPC;
		case 'ppc64':
			return $gren_lang$node$Node$PPC64;
		case 's390':
			return $gren_lang$node$Node$S390;
		case 's390x':
			return $gren_lang$node$Node$S390x;
		case 'x64':
			return $gren_lang$node$Node$X64;
		default:
			return $gren_lang$node$Node$UnknownArchitecture(arch);
	}
};
var $gren_lang$core$Task$succeed = _Scheduler_succeed;
var $gren_lang$core$Task$map$ = function(func, taskA) {
	return A2($gren_lang$core$Task$andThen, function(a) {
			return $gren_lang$core$Task$succeed(func(a));
		}, taskA);
};
var $gren_lang$core$Task$map = F2($gren_lang$core$Task$map$);
var $gren_lang$node$Node$Aix = { $: 6 };
var $gren_lang$node$Node$Darwin = { $: 1 };
var $gren_lang$node$Node$FreeBSD = { $: 3 };
var $gren_lang$node$Node$Linux = { $: 2 };
var $gren_lang$node$Node$OpenBSD = { $: 4 };
var $gren_lang$node$Node$SunOS = { $: 5 };
var $gren_lang$node$Node$UnknownPlatform = function (a) {
	return { $: 7, a: a };
};
var $gren_lang$node$Node$Win32 = { $: 0 };
var $gren_lang$node$Node$platformFromString = function(platform) {
	var _v0 = $gren_lang$core$String$toLower(platform);
	switch (_v0) {
		case 'win32':
			return $gren_lang$node$Node$Win32;
		case 'darwin':
			return $gren_lang$node$Node$Darwin;
		case 'linux':
			return $gren_lang$node$Node$Linux;
		case 'freebsd':
			return $gren_lang$node$Node$FreeBSD;
		case 'openbsd':
			return $gren_lang$node$Node$OpenBSD;
		case 'sunos':
			return $gren_lang$node$Node$SunOS;
		case 'aix':
			return $gren_lang$node$Node$Aix;
		default:
			return $gren_lang$node$Node$UnknownPlatform(platform);
	}
};
var $gren_lang$node$Node$initializeEnvironment = $gren_lang$core$Task$map$(function(raw) {
		return { a6: raw.a6, a7: raw.a7, bb: $gren_lang$node$Node$archFromString(raw.bL), bv: $gren_lang$node$Node$platformFromString(raw.bv), az: $gren_lang$node$Internal$Stream$Stream$(1, raw.az), am: $gren_lang$node$Internal$Stream$Stream$(2, raw.am), aA: $gren_lang$node$Internal$Stream$Stream$(0, raw.aA) };
	}, _Node_init);
var $gren_lang$core$Task$Perform = function (a) {
	return { $: 0, a: a };
};
var $gren_lang$core$Task$init = $gren_lang$core$Task$succeed({  });
var $gren_lang$core$Array$map = _Array_map;
var $gren_lang$core$Array$foldr = _Array_foldr;
var $gren_lang$core$Task$map2$ = function(func, taskA, taskB) {
	return A2($gren_lang$core$Task$andThen, function(a) {
			return A2($gren_lang$core$Task$andThen, function(b) {
					return $gren_lang$core$Task$succeed(A2(func, a, b));
				}, taskB);
		}, taskA);
};
var $gren_lang$core$Task$map2 = F3($gren_lang$core$Task$map2$);
var $gren_lang$core$Array$pushFirst$ = function(value, array) {
	return A4(_Array_splice1, 0, 0, value, array);
};
var $gren_lang$core$Array$pushFirst = F2($gren_lang$core$Array$pushFirst$);
var $gren_lang$core$Task$sequence = function(tasks) {
	return A3($gren_lang$core$Array$foldr, $gren_lang$core$Task$map2($gren_lang$core$Array$pushFirst), $gren_lang$core$Task$succeed([  ]), tasks);
};
var $gren_lang$core$Platform$sendToApp = _Platform_sendToApp;
var $gren_lang$core$Task$spawnCmd$ = function(router, cmd) {
	if (!cmd.$) {
		var task = cmd.a;
		return _Scheduler_spawn(A2($gren_lang$core$Task$andThen, $gren_lang$core$Platform$sendToApp(router), task));
	} else {
		var task = cmd.a;
		return _Scheduler_spawn(task);
	}
};
var $gren_lang$core$Task$spawnCmd = F2($gren_lang$core$Task$spawnCmd$);
var $gren_lang$core$Task$onEffects$ = function(router, commands, state) {
	return $gren_lang$core$Task$map$(function(_v0) {
			return {  };
		}, $gren_lang$core$Task$sequence(A2($gren_lang$core$Array$map, $gren_lang$core$Task$spawnCmd(router), commands)));
};
var $gren_lang$core$Task$onEffects = F3($gren_lang$core$Task$onEffects$);
var $gren_lang$core$Task$onSelfMsg$ = function(_v0, _v1, _v2) {
	return $gren_lang$core$Task$succeed({  });
};
var $gren_lang$core$Task$onSelfMsg = F3($gren_lang$core$Task$onSelfMsg$);
var $gren_lang$core$Task$Execute = function (a) {
	return { $: 1, a: a };
};
var $gren_lang$core$Task$cmdMap$ = function(tagger, cmd) {
	if (!cmd.$) {
		var task = cmd.a;
		return $gren_lang$core$Task$Perform($gren_lang$core$Task$map$(tagger, task));
	} else {
		var task = cmd.a;
		return $gren_lang$core$Task$Execute(task);
	}
};
var $gren_lang$core$Task$cmdMap = F2($gren_lang$core$Task$cmdMap$);
_Platform_effectManagers['Task'] = _Platform_createManager($gren_lang$core$Task$init, $gren_lang$core$Task$onEffects, $gren_lang$core$Task$onSelfMsg, $gren_lang$core$Task$cmdMap);
var $gren_lang$core$Task$command = _Platform_leaf('Task');
var $gren_lang$core$Task$perform$ = function(toMessage, task) {
	return $gren_lang$core$Task$command($gren_lang$core$Task$Perform($gren_lang$core$Task$map$(toMessage, task)));
};
var $gren_lang$core$Task$perform = F2($gren_lang$core$Task$perform$);
var $gren_lang$node$Node$unwrap = function(_v0) {
	var task = _v0;
	return task;
};
var $gren_lang$node$Node$init$ = function(initTask, _v0) {
	return { ba: $gren_lang$core$Task$perform$($gren_lang$node$Node$InitDone, A2($gren_lang$core$Task$andThen, function(env) {
				return $gren_lang$node$Node$unwrap(initTask(env));
			}, $gren_lang$node$Node$initializeEnvironment)), bp: $gren_lang$node$Node$Uninitialized };
};
var $gren_lang$node$Node$init = F2($gren_lang$node$Node$init$);
var $gren_lang$node$Node$MsgReceived = function (a) {
	return { $: 1, a: a };
};
var $gren_lang$core$Platform$Sub$map = _Platform_map;
var $gren_lang$core$Platform$Sub$batch = _Platform_batch;
var $gren_lang$core$Platform$Sub$none = $gren_lang$core$Platform$Sub$batch([  ]);
var $gren_lang$node$Node$subscriptions$ = function(appSubs, model) {
	if (!model.$) {
		return $gren_lang$core$Platform$Sub$none;
	} else {
		var appModel = model.a;
		return A2($gren_lang$core$Platform$Sub$map, $gren_lang$node$Node$MsgReceived, appSubs(appModel));
	}
};
var $gren_lang$node$Node$subscriptions = F2($gren_lang$node$Node$subscriptions$);
var $gren_lang$node$Node$Initialized = function (a) {
	return { $: 1, a: a };
};
var $gren_lang$core$Platform$Cmd$map = _Platform_map;
var $gren_lang$core$Platform$Cmd$batch = _Platform_batch;
var $gren_lang$core$Platform$Cmd$none = $gren_lang$core$Platform$Cmd$batch([  ]);
var $gren_lang$node$Node$update$ = function(appUpdate, msg, model) {
	if (!model.$) {
		if (!msg.$) {
			var initResult = msg.a;
			return { ba: A2($gren_lang$core$Platform$Cmd$map, $gren_lang$node$Node$MsgReceived, initResult.ba), bp: $gren_lang$node$Node$Initialized(initResult.bp) };
		} else {
			return { ba: $gren_lang$core$Platform$Cmd$none, bp: model };
		}
	} else {
		var appModel = model.a;
		if (!msg.$) {
			return { ba: $gren_lang$core$Platform$Cmd$none, bp: model };
		} else {
			var appMsg = msg.a;
			var updateResult = A2(appUpdate, appMsg, appModel);
			return { ba: A2($gren_lang$core$Platform$Cmd$map, $gren_lang$node$Node$MsgReceived, updateResult.ba), bp: $gren_lang$node$Node$Initialized(updateResult.bp) };
		}
	}
};
var $gren_lang$node$Node$update = F3($gren_lang$node$Node$update$);
var $gren_lang$core$Platform$worker = _Platform_worker;
var $gren_lang$node$Node$defineProgram = function(config) {
	return $gren_lang$core$Platform$worker({ b4: $gren_lang$node$Node$init(config.b4), ct: $gren_lang$node$Node$subscriptions(config.ct), cz: $gren_lang$node$Node$update(config.cz) });
};
var $gren_lang$core$Basics$identity = function(x) {
	return x;
};
var $gren_lang$node$Internal$Init$Task = $gren_lang$core$Basics$identity;
var $gren_lang$core$Basics$composeL$ = function(g, f) {
	return function(x) {
		return g(f(x));
	};
};
var $gren_lang$core$Basics$composeL = F2($gren_lang$core$Basics$composeL$);
var $gren_lang$node$Init$unwrap = function(_v0) {
	var task = _v0;
	return task;
};
var $gren_lang$node$Init$await$ = function(_v0, fn) {
	var task = _v0;
	return A2($gren_lang$core$Task$andThen, $gren_lang$core$Basics$composeL$($gren_lang$node$Init$unwrap, fn), task);
};
var $gren_lang$node$Init$await = F2($gren_lang$node$Init$await$);
var $gren_lang$core$Task$execute = function(task) {
	return $gren_lang$core$Task$command($gren_lang$core$Task$Execute($gren_lang$core$Task$map$(function(_v0) {
					return {  };
				}, task)));
};
var $gren_lang$node$Node$exitWithCode = function(code) {
	return _Node_exitWithCode(code);
};
var $blaix$gren_ansi$Ansi$escape = '\u001B';
var $blaix$gren_ansi$Ansi$prefix = $blaix$gren_ansi$Ansi$escape + '[';
var $blaix$gren_ansi$Ansi$getCursorReport = $blaix$gren_ansi$Ansi$prefix + '6n';


var process = require("node:process");

var _Terminal_init = _Scheduler_binding(function (callback) {
  callback(
    _Scheduler_succeed({
      b6: process.stdout.isTTY,
      Y: process.stdout.getColorDepth
        ? process.stdout.getColorDepth()
        : 0,
      J: process.stdout.columns,
      P: process.stdout.rows,
    })
  );
});

var _Terminal_attachListener = function (sendToApp) {
  return _Scheduler_binding(function (_callback) {
    var listener = function (data) {
      _Scheduler_rawSpawn(
        sendToApp({
          J: process.stdout.columns,
          P: process.stdout.rows,
        })
      );
    };

    process.stdout.on("resize", listener);

    return function () {
      process.stdout.off("resize", listener);
      process.stdout.pause();
    };
  });
};

var _Terminal_setStdInRawMode = function (toggle) {
  return _Scheduler_binding(function (callback) {
    process.stdin.setRawMode(toggle);
    callback(_Scheduler_succeed({}));
  });
};

var _Terminal_setProcessTitle = function (title) {
  return _Scheduler_binding(function (callback) {
    process.title = title;
    callback(_Scheduler_succeed({}));
  });
};
var $gren_lang$node$Terminal$Permission = 0;
var $gren_lang$node$Terminal$initialize = $gren_lang$core$Task$map$(function(raw) {
		return raw.b6 ? $gren_lang$core$Maybe$Just({ Y: raw.Y, J: raw.J, bu: 0, P: raw.P }) : $gren_lang$core$Maybe$Nothing;
	}, _Terminal_init);


// BYTES

var _Bytes_empty = new DataView(new ArrayBuffer(0));

function _Bytes_length(bytes) {
  return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function (le, be) {
  return _Scheduler_binding(function (callback) {
    callback(
      _Scheduler_succeed(
        new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be,
      ),
    );
  });
});

function _Bytes_fromString(str) {
  var encoder = new TextEncoder();
  var uint8s = encoder.encode(str);
  return new DataView(uint8s.buffer);
}

function _Bytes_toString(bytes) {
  var decoder = new TextDecoder("utf-8", { fatal: true });

  try {
    return $gren_lang$core$Maybe$Just(decoder.decode(bytes));
  } catch (e) {
    return $gren_lang$core$Maybe$Nothing;
  }
}

function _Bytes_join(arrayOfBytes) {
  var requiredSize = 0;
  for (var i = 0; i < arrayOfBytes.length; i++) {
    requiredSize += arrayOfBytes[i].byteLength;
  }

  var offset = 0;
  var result = new Uint8Array(requiredSize);

  for (var i = 0; i < arrayOfBytes.length; i++) {
    var currentBytes = new Uint8Array(arrayOfBytes[i].buffer);
    var currentByteLength = arrayOfBytes[i].byteLength;

    for (var j = 0; j < currentByteLength; j++) {
      result[offset] = currentBytes[j];
      offset++;
    }
  }

  return new DataView(result.buffer);
}

// ENCODERS

function _Bytes_encode(encoder) {
  var mutableBytes = new DataView(new ArrayBuffer($gren_lang$core$Bytes$Encode$getLength(encoder)));
  A3($gren_lang$core$Bytes$Encode$write, encoder, mutableBytes, 0);
  return mutableBytes;
}

// SIGNED INTEGERS

var _Bytes_write_i8 = F3(function (mb, i, n) {
  mb.setInt8(i, n);
  return i + 1;
});
var _Bytes_write_i16 = F4(function (mb, i, n, isLE) {
  mb.setInt16(i, n, isLE);
  return i + 2;
});
var _Bytes_write_i32 = F4(function (mb, i, n, isLE) {
  mb.setInt32(i, n, isLE);
  return i + 4;
});

// UNSIGNED INTEGERS

var _Bytes_write_u8 = F3(function (mb, i, n) {
  mb.setUint8(i, n);
  return i + 1;
});
var _Bytes_write_u16 = F4(function (mb, i, n, isLE) {
  mb.setUint16(i, n, isLE);
  return i + 2;
});
var _Bytes_write_u32 = F4(function (mb, i, n, isLE) {
  mb.setUint32(i, n, isLE);
  return i + 4;
});

// FLOATS

var _Bytes_write_f32 = F4(function (mb, i, n, isLE) {
  mb.setFloat32(i, n, isLE);
  return i + 4;
});
var _Bytes_write_f64 = F4(function (mb, i, n, isLE) {
  mb.setFloat64(i, n, isLE);
  return i + 8;
});

// BYTES

var _Bytes_write_bytes = F3(function (mb, offset, bytes) {
  for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4) {
    mb.setUint32(offset + i, bytes.getUint32(i));
  }
  for (; i < len; i++) {
    mb.setUint8(offset + i, bytes.getUint8(i));
  }
  return offset + len;
});

// DECODER

var _Bytes_decode = F2(function (decoder, bytes) {
  try {
    return $gren_lang$core$Maybe$Just(A2(decoder, bytes, 0).f);
  } catch (e) {
    if (e instanceof RangeError) {
      return $gren_lang$core$Maybe$Nothing;
    } else {
      throw e;
    }
  }
});

var _Bytes_read_i8 = F2(function (bytes, offset) {
  return { e: offset + 1, f: bytes.getInt8(offset) };
});
var _Bytes_read_i16 = F3(function (isLE, bytes, offset) {
  return { e: offset + 2, f: bytes.getInt16(offset, isLE) };
});
var _Bytes_read_i32 = F3(function (isLE, bytes, offset) {
  return { e: offset + 4, f: bytes.getInt32(offset, isLE) };
});
var _Bytes_read_u8 = F2(function (bytes, offset) {
  return { e: offset + 1, f: bytes.getUint8(offset) };
});
var _Bytes_read_u16 = F3(function (isLE, bytes, offset) {
  return { e: offset + 2, f: bytes.getUint16(offset, isLE) };
});
var _Bytes_read_u32 = F3(function (isLE, bytes, offset) {
  return { e: offset + 4, f: bytes.getUint32(offset, isLE) };
});
var _Bytes_read_f32 = F3(function (isLE, bytes, offset) {
  return { e: offset + 4, f: bytes.getFloat32(offset, isLE) };
});
var _Bytes_read_f64 = F3(function (isLE, bytes, offset) {
  return { e: offset + 8, f: bytes.getFloat64(offset, isLE) };
});

var _Bytes_read_bytes = F3(function (len, bytes, offset) {
  return {
    e: offset + len,
    f: new DataView(bytes.buffer, bytes.byteOffset + offset, len),
  };
});

var _Bytes_decodeFailure = F2(function () {
  throw 0;
});
var $gren_lang$core$Bytes$Encode$getLength = function(builder) {
	switch (builder.$) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 4;
		case 3:
			return 1;
		case 4:
			return 2;
		case 5:
			return 4;
		case 6:
			return 4;
		case 7:
			return 8;
		case 8:
			var w = builder.a;
			return w;
		case 9:
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_length(bs);
	}
};
var $gren_lang$core$Bytes$LE = 0;
var $gren_lang$core$Basics$eq = _Utils_equal;
var $gren_lang$core$Array$foldl = _Array_foldl;
var $gren_lang$core$Bytes$Encode$write$ = function(builder, mb, offset) {
	switch (builder.$) {
		case 0:
			var n = builder.a;
			return A3(_Bytes_write_i8, mb, offset, n);
		case 1:
			var e = builder.a;
			var n = builder.b;
			return A4(_Bytes_write_i16, mb, offset, n, !e);
		case 2:
			var e = builder.a;
			var n = builder.b;
			return A4(_Bytes_write_i32, mb, offset, n, !e);
		case 3:
			var n = builder.a;
			return A3(_Bytes_write_u8, mb, offset, n);
		case 4:
			var e = builder.a;
			var n = builder.b;
			return A4(_Bytes_write_u16, mb, offset, n, !e);
		case 5:
			var e = builder.a;
			var n = builder.b;
			return A4(_Bytes_write_u32, mb, offset, n, !e);
		case 6:
			var e = builder.a;
			var n = builder.b;
			return A4(_Bytes_write_f32, mb, offset, n, !e);
		case 7:
			var e = builder.a;
			var n = builder.b;
			return A4(_Bytes_write_f64, mb, offset, n, !e);
		case 8:
			var bs = builder.b;
			return $gren_lang$core$Bytes$Encode$writeSequence$(bs, mb, offset);
		case 9:
			var s = builder.b;
			return A3(_Bytes_write_string, mb, offset, s);
		default:
			var bs = builder.a;
			return A3(_Bytes_write_bytes, mb, offset, bs);
	}
};
var $gren_lang$core$Bytes$Encode$write = F3($gren_lang$core$Bytes$Encode$write$);
var $gren_lang$core$Bytes$Encode$writeSequence$ = function(builders, mb, offset) {
	return A3($gren_lang$core$Array$foldl, F2(function(builder, currentOffset) {
				return $gren_lang$core$Bytes$Encode$write$(builder, mb, currentOffset);
			}), offset, builders);
};
var $gren_lang$core$Bytes$Encode$writeSequence = F3($gren_lang$core$Bytes$Encode$writeSequence$);
var $gren_lang$core$Bytes$fromString = _Bytes_fromString;


var _Stream_attachListener = F2(function (stream, sendToApp) {
  return _Scheduler_binding(function (_callback) {
    var listener = function (data) {
      _Scheduler_rawSpawn(
        sendToApp(new DataView(data.buffer, data.byteOffset, data.byteLength))
      );
    };

    stream.on("data", listener);

    return function () {
      stream.off("data", listener);
      stream.pause();
    };
  });
});

var _Stream_send = F2(function (stream, data) {
  return _Scheduler_binding(function (callback) {
    stream.write(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));
    callback(_Scheduler_succeed({}));
  });
});
var $gren_lang$node$Stream$send$ = function(_v0, bytes) {
	var kernelStream = _v0.b;
	return A2(_Stream_send, kernelStream, bytes);
};
var $gren_lang$node$Stream$send = F2($gren_lang$node$Stream$send$);
var $gren_lang$node$Stream$sendString$ = function(stream, string) {
	return $gren_lang$node$Stream$send$(stream, $gren_lang$core$Bytes$fromString(string));
};
var $gren_lang$node$Stream$sendString = F2($gren_lang$node$Stream$sendString$);
var $gren_lang$node$Terminal$setStdInRawMode$ = function(_v0, toggle) {
	return _Terminal_setStdInRawMode(toggle);
};
var $gren_lang$node$Terminal$setStdInRawMode = F2($gren_lang$node$Terminal$setStdInRawMode$);
var $gren_lang$node$Node$startProgram = function(initResult) {
	return $gren_lang$core$Task$succeed(initResult);
};
var $blaix$gren_tui$UI$Text = function (a) {
	return { $: 2, a: a };
};
var $blaix$gren_tui$UI$Col = function (a) {
	return { $: 1, a: a };
};
var $blaix$gren_tui$UI$column$ = function(attrs, children) {
	return $blaix$gren_tui$UI$Col({ p: attrs, aq: children });
};
var $blaix$gren_tui$UI$column = F2($blaix$gren_tui$UI$column$);
var $blaix$gren_tui$SingleLine$SingleLine = $gren_lang$core$Basics$identity;
var $gren_lang$core$String$lines = _String_lines;
var $blaix$gren_tui$SingleLine$fromString = function(string) {
	return A2($gren_lang$core$Array$map, $gren_lang$core$Basics$identity, $gren_lang$core$String$lines(string));
};
var $blaix$gren_tui$UI$text$ = function(attrs, content) {
	return $blaix$gren_tui$UI$column$([  ], A2($gren_lang$core$Array$map, function(l) {
				return $blaix$gren_tui$UI$Text({ p: attrs, l: l });
			}, $blaix$gren_tui$SingleLine$fromString(content)));
};
var $blaix$gren_tui$UI$text = F2($blaix$gren_tui$UI$text$);
var $blaix$gren_tui$Tui$init$ = function(appInit, env) {
	return $gren_lang$node$Init$await$($gren_lang$node$Terminal$initialize, function(termConfig) {
			var termConfigForApp = function () {
				if (!termConfig.$) {
					var tConfig = termConfig.a;
					return { Y: tConfig.Y, J: tConfig.J, P: tConfig.P };
				} else {
					return { Y: 0, J: 0, P: 0 };
				}
			}();
			var tuiEnv = { a6: env.a6, a7: env.a7, Y: termConfigForApp.Y, J: termConfigForApp.J, bb: env.bb, bv: env.bv, P: termConfigForApp.P, az: env.az, am: env.am, aA: env.aA };
			return $gren_lang$node$Init$await$(appInit(tuiEnv), function(app) {
					var model = { aE: $gren_lang$core$Maybe$Just(app.ba), U: app.bp, V: false, v: 0, ah: $blaix$gren_tui$UI$text$([  ], ''), az: env.az, am: env.am, aA: env.aA, an: 0, a0: $gren_lang$core$Maybe$Nothing, aC: 0 };
					return $gren_lang$node$Node$startProgram(function () {
							if (!termConfig.$) {
								var config = termConfig.a;
								return { ba: $gren_lang$core$Task$execute(A2($gren_lang$core$Task$andThen, function(_v1) {
											return $gren_lang$node$Stream$sendString$(env.aA, $blaix$gren_ansi$Ansi$getCursorReport);
										}, $gren_lang$node$Terminal$setStdInRawMode$(config.bu, true))), bp: _Utils_update(model, { an: config.J, a0: $gren_lang$core$Maybe$Just(config.bu), aC: config.P }) };
							} else {
								return { ba: $gren_lang$core$Task$execute($gren_lang$node$Node$exitWithCode(1)), bp: model };
							}
						}());
				});
		});
};
var $blaix$gren_tui$Tui$init = F2($blaix$gren_tui$Tui$init$);
var $blaix$gren_tui$Tui$AppMsg = function (a) {
	return { $: 2, a: a };
};
var $blaix$gren_tui$Tui$GotStdin = function (a) {
	return { $: 0, a: a };
};
var $blaix$gren_tui$Tui$TerminalResized = function (a) {
	return { $: 1, a: a };
};
var $blaix$gren_tui$Tui$Tick = function (a) {
	return { $: 3, a: a };
};
var $gren_lang$core$Time$Every$ = function (a, b) {
	return { $: 0, a: a, b: b };
};
var $gren_lang$core$Time$Every = F2($gren_lang$core$Time$Every$);
var $gren_lang$core$Time$init = $gren_lang$core$Task$succeed({ bz: $gren_lang$core$Dict$empty, aZ: $gren_lang$core$Dict$empty });
var $gren_lang$core$Dict$get$ = function(targetKey, dict) {
	get:
	while (true) {
		if (dict.$ === -2) {
			return $gren_lang$core$Maybe$Nothing;
		} else {
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			var _v1 = A2($gren_lang$core$Basics$compare, targetKey, key);
			switch (_v1) {
				case 0:
					var $temp$targetKey = targetKey,
					$temp$dict = left;
					targetKey = $temp$targetKey;
					dict = $temp$dict;
					continue get;
				case 1:
					return $gren_lang$core$Maybe$Just(value);
				default:
					var $temp$targetKey = targetKey,
					$temp$dict = right;
					targetKey = $temp$targetKey;
					dict = $temp$dict;
					continue get;
			}
		}
	}
};
var $gren_lang$core$Dict$get = F2($gren_lang$core$Dict$get$);
var $gren_lang$core$Time$addMySub$ = function(_v0, state) {
	var interval = _v0.a;
	var tagger = _v0.b;
	var _v1 = $gren_lang$core$Dict$get$(interval, state);
	if (_v1.$ === 1) {
		return $gren_lang$core$Dict$set$(interval, [ tagger ], state);
	} else {
		var taggers = _v1.a;
		return $gren_lang$core$Dict$set$(interval, _Utils_ap([ tagger ], taggers), state);
	}
};
var $gren_lang$core$Time$addMySub = F2($gren_lang$core$Time$addMySub$);
var $gren_lang$core$Dict$getMin = function(dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $gren_lang$core$Basics$lt = _Utils_lt;
var $gren_lang$core$Dict$moveRedLeft = function(dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return $gren_lang$core$Dict$RBNode_gren_builtin$(0, rlK, rlV, $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, lLeft, lRight), rlL), $gren_lang$core$Dict$RBNode_gren_builtin$(1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, lLeft, lRight), $gren_lang$core$Dict$RBNode_gren_builtin$(0, rK, rV, rLeft, rRight));
			} else {
				return $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, lLeft, lRight), $gren_lang$core$Dict$RBNode_gren_builtin$(0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $gren_lang$core$Dict$moveRedRight = function(dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, $gren_lang$core$Dict$RBNode_gren_builtin$(1, llK, llV, llLeft, llRight), $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, lRight, $gren_lang$core$Dict$RBNode_gren_builtin$(0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, lLeft, lRight), $gren_lang$core$Dict$RBNode_gren_builtin$(0, rK, rV, rLeft, rRight));
			} else {
				return $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, $gren_lang$core$Dict$RBNode_gren_builtin$(0, lK, lV, lLeft, lRight), $gren_lang$core$Dict$RBNode_gren_builtin$(0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $gren_lang$core$Dict$removeHelpPrepEQGT$ = function(targetKey, dict, color, key, value, left, right) {
	if ((left.$ === -1) && (!left.a)) {
		var _v1 = left.a;
		var lK = left.b;
		var lV = left.c;
		var lLeft = left.d;
		var lRight = left.e;
		return $gren_lang$core$Dict$RBNode_gren_builtin$(color, lK, lV, lLeft, $gren_lang$core$Dict$RBNode_gren_builtin$(0, key, value, lRight, right));
	} else {
		_v2$2:
		while (true) {
			if ((right.$ === -1) && (right.a === 1)) {
				if (right.d.$ === -1) {
					if (right.d.a === 1) {
						var _v3 = right.a;
						var _v4 = right.d;
						var _v5 = _v4.a;
						return $gren_lang$core$Dict$moveRedRight(dict);
					} else {
						break _v2$2;
					}
				} else {
					var _v6 = right.a;
					var _v7 = right.d;
					return $gren_lang$core$Dict$moveRedRight(dict);
				}
			} else {
				break _v2$2;
			}
		}
		return dict;
	}
};
var $gren_lang$core$Dict$removeHelpPrepEQGT = F7($gren_lang$core$Dict$removeHelpPrepEQGT$);
var $gren_lang$core$Dict$removeMin = function(dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return $gren_lang$core$Dict$RBNode_gren_builtin$(color, key, value, $gren_lang$core$Dict$removeMin(left), right);
			} else {
				var _v4 = $gren_lang$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return $gren_lang$core$Dict$balance$(nColor, nKey, nValue, $gren_lang$core$Dict$removeMin(nLeft), nRight);
				} else {
					return $gren_lang$core$Dict$RBEmpty_gren_builtin;
				}
			}
		} else {
			return $gren_lang$core$Dict$RBNode_gren_builtin$(color, key, value, $gren_lang$core$Dict$removeMin(left), right);
		}
	} else {
		return $gren_lang$core$Dict$RBEmpty_gren_builtin;
	}
};
var $gren_lang$core$Dict$removeHelp$ = function(targetKey, dict) {
	if (dict.$ === -2) {
		return $gren_lang$core$Dict$RBEmpty_gren_builtin;
	} else {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var right = dict.e;
		if (_Utils_cmp(targetKey, key) < 0) {
			if ((left.$ === -1) && (left.a === 1)) {
				var _v4 = left.a;
				var lLeft = left.d;
				if ((lLeft.$ === -1) && (!lLeft.a)) {
					var _v6 = lLeft.a;
					return $gren_lang$core$Dict$RBNode_gren_builtin$(color, key, value, $gren_lang$core$Dict$removeHelp$(targetKey, left), right);
				} else {
					var _v7 = $gren_lang$core$Dict$moveRedLeft(dict);
					if (_v7.$ === -1) {
						var nColor = _v7.a;
						var nKey = _v7.b;
						var nValue = _v7.c;
						var nLeft = _v7.d;
						var nRight = _v7.e;
						return $gren_lang$core$Dict$balance$(nColor, nKey, nValue, $gren_lang$core$Dict$removeHelp$(targetKey, nLeft), nRight);
					} else {
						return $gren_lang$core$Dict$RBEmpty_gren_builtin;
					}
				}
			} else {
				return $gren_lang$core$Dict$RBNode_gren_builtin$(color, key, value, $gren_lang$core$Dict$removeHelp$(targetKey, left), right);
			}
		} else {
			return $gren_lang$core$Dict$removeHelpEQGT$(targetKey, $gren_lang$core$Dict$removeHelpPrepEQGT$(targetKey, dict, color, key, value, left, right));
		}
	}
};
var $gren_lang$core$Dict$removeHelp = F2($gren_lang$core$Dict$removeHelp$);
var $gren_lang$core$Dict$removeHelpEQGT$ = function(targetKey, dict) {
	if (dict.$ === -1) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var right = dict.e;
		if (_Utils_eq(targetKey, key)) {
			var _v1 = $gren_lang$core$Dict$getMin(right);
			if (_v1.$ === -1) {
				var minKey = _v1.b;
				var minValue = _v1.c;
				return $gren_lang$core$Dict$balance$(color, minKey, minValue, left, $gren_lang$core$Dict$removeMin(right));
			} else {
				return $gren_lang$core$Dict$RBEmpty_gren_builtin;
			}
		} else {
			return $gren_lang$core$Dict$balance$(color, key, value, left, $gren_lang$core$Dict$removeHelp$(targetKey, right));
		}
	} else {
		return $gren_lang$core$Dict$RBEmpty_gren_builtin;
	}
};
var $gren_lang$core$Dict$removeHelpEQGT = F2($gren_lang$core$Dict$removeHelpEQGT$);
var $gren_lang$core$Dict$remove$ = function(key, dict) {
	var _v0 = $gren_lang$core$Dict$removeHelp$(key, dict);
	if ((_v0.$ === -1) && (!_v0.a)) {
		var _v1 = _v0.a;
		var k = _v0.b;
		var v = _v0.c;
		var l = _v0.d;
		var r = _v0.e;
		return $gren_lang$core$Dict$RBNode_gren_builtin$(1, k, v, l, r);
	} else {
		var x = _v0;
		return x;
	}
};
var $gren_lang$core$Dict$remove = F2($gren_lang$core$Dict$remove$);
var $gren_lang$core$Dict$diff$ = function(t1, t2) {
	return $gren_lang$core$Dict$foldl$(F3(function(k, v, t) {
				return $gren_lang$core$Dict$remove$(k, t);
			}), t1, t2);
};
var $gren_lang$core$Dict$diff = F2($gren_lang$core$Dict$diff$);
var $gren_lang$core$Dict$filter$ = function(isGood, dict) {
	return $gren_lang$core$Dict$foldl$(F3(function(k, v, d) {
				return A2(isGood, k, v) ? $gren_lang$core$Dict$set$(k, v, d) : d;
			}), $gren_lang$core$Dict$empty, dict);
};
var $gren_lang$core$Dict$filter = F2($gren_lang$core$Dict$filter$);
var $gren_lang$core$Process$kill = _Scheduler_kill;
var $gren_lang$core$Dict$member$ = function(key, dict) {
	var _v0 = $gren_lang$core$Dict$get$(key, dict);
	if (!_v0.$) {
		return true;
	} else {
		return false;
	}
};
var $gren_lang$core$Dict$member = F2($gren_lang$core$Dict$member$);
var $gren_lang$core$Array$get = _Array_get;
var $gren_lang$core$Platform$sendToSelf = _Platform_sendToSelf;


function _Time_now(millisToPosix) {
  return _Scheduler_binding(function (callback) {
    callback(_Scheduler_succeed(millisToPosix(Date.now())));
  });
}

var _Time_setInterval = F2(function (interval, task) {
  return _Scheduler_binding(function (callback) {
    var id = setInterval(function () {
      _Scheduler_rawSpawn(task);
    }, interval);
    return function () {
      clearInterval(id);
    };
  });
});

function _Time_here() {
  return _Scheduler_binding(function (callback) {
    callback(
      _Scheduler_succeed(
        A2($gren_lang$core$Time$customZone, -new Date().getTimezoneOffset(), []),
      ),
    );
  });
}

function _Time_getZoneName() {
  return _Scheduler_binding(function (callback) {
    try {
      var name = $gren_lang$core$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
    } catch (e) {
      var name = $gren_lang$core$Time$Offset(new Date().getTimezoneOffset());
    }
    callback(_Scheduler_succeed(name));
  });
}
var $gren_lang$core$Time$Name = function (a) {
	return { $: 0, a: a };
};
var $gren_lang$core$Time$Offset = function (a) {
	return { $: 1, a: a };
};
var $gren_lang$core$Time$Zone$ = function (a, b) {
	return { $: 0, a: a, b: b };
};
var $gren_lang$core$Time$Zone = F2($gren_lang$core$Time$Zone$);
var $gren_lang$core$Time$customZone = $gren_lang$core$Time$Zone;
var $gren_lang$core$Time$setInterval = _Time_setInterval;
var $gren_lang$core$Array$slice = _Array_slice;
var $gren_lang$core$Process$spawn = _Scheduler_spawn;
var $gren_lang$core$Time$spawnHelp$ = function(router, intervals, processes) {
	var _v0 = A2($gren_lang$core$Array$get, 0, intervals);
	if (_v0.$ === 1) {
		return $gren_lang$core$Task$succeed(processes);
	} else {
		var interval = _v0.a;
		var spawnTimer = $gren_lang$core$Process$spawn(A2($gren_lang$core$Time$setInterval, interval, A2($gren_lang$core$Platform$sendToSelf, router, interval)));
		var rest = A3($gren_lang$core$Array$slice, 1, $gren_lang$core$Array$length(intervals), intervals);
		var spawnRest = function(id) {
			return $gren_lang$core$Time$spawnHelp$(router, rest, $gren_lang$core$Dict$set$(interval, id, processes));
		};
		return A2($gren_lang$core$Task$andThen, spawnRest, spawnTimer);
	}
};
var $gren_lang$core$Time$spawnHelp = F3($gren_lang$core$Time$spawnHelp$);
var $gren_lang$core$Dict$values = function(dict) {
	return $gren_lang$core$Dict$foldl$(F3(function(key, value, valueArray) {
				return $gren_lang$core$Array$pushLast$(value, valueArray);
			}), [  ], dict);
};
var $gren_lang$core$Time$onEffects$ = function(router, subs, _v0) {
	var processes = _v0.bz;
	var newTaggers = A3($gren_lang$core$Array$foldl, $gren_lang$core$Time$addMySub, $gren_lang$core$Dict$empty, subs);
	var spawnArray = $gren_lang$core$Dict$keys($gren_lang$core$Dict$diff$(newTaggers, processes));
	var killTask = A3($gren_lang$core$Array$foldl, function(id) {
			return $gren_lang$core$Task$andThen(function(_v3) {
					return $gren_lang$core$Process$kill(id);
				});
		}, $gren_lang$core$Task$succeed({  }), $gren_lang$core$Dict$values($gren_lang$core$Dict$diff$(processes, newTaggers)));
	var existingDict = $gren_lang$core$Dict$filter$(F2(function(key, _v2) {
				return $gren_lang$core$Dict$member$(key, newTaggers);
			}), processes);
	return A2($gren_lang$core$Task$andThen, function(newProcesses) {
			return $gren_lang$core$Task$succeed({ bz: newProcesses, aZ: newTaggers });
		}, A2($gren_lang$core$Task$andThen, function(_v1) {
				return $gren_lang$core$Time$spawnHelp$(router, spawnArray, existingDict);
			}, killTask));
};
var $gren_lang$core$Time$onEffects = F3($gren_lang$core$Time$onEffects$);
var $gren_lang$core$Time$Posix = $gren_lang$core$Basics$identity;
var $gren_lang$core$Time$millisToPosix = $gren_lang$core$Basics$identity;
var $gren_lang$core$Time$now = _Time_now($gren_lang$core$Time$millisToPosix);
var $gren_lang$core$Time$onSelfMsg$ = function(router, interval, state) {
	var _v0 = $gren_lang$core$Dict$get$(interval, state.aZ);
	if (_v0.$ === 1) {
		return $gren_lang$core$Task$succeed(state);
	} else {
		var taggers = _v0.a;
		var tellTaggers = function(time) {
			return $gren_lang$core$Task$sequence(A2($gren_lang$core$Array$map, function(tagger) {
						return A2($gren_lang$core$Platform$sendToApp, router, tagger(time));
					}, taggers));
		};
		return A2($gren_lang$core$Task$andThen, function(_v1) {
				return $gren_lang$core$Task$succeed(state);
			}, A2($gren_lang$core$Task$andThen, tellTaggers, $gren_lang$core$Time$now));
	}
};
var $gren_lang$core$Time$onSelfMsg = F3($gren_lang$core$Time$onSelfMsg$);
var $gren_lang$core$Time$subMap$ = function(f, _v0) {
	var interval = _v0.a;
	var tagger = _v0.b;
	return $gren_lang$core$Time$Every$(interval, $gren_lang$core$Basics$composeL$(f, tagger));
};
var $gren_lang$core$Time$subMap = F2($gren_lang$core$Time$subMap$);
_Platform_effectManagers['Time'] = _Platform_createManager($gren_lang$core$Time$init, $gren_lang$core$Time$onEffects, $gren_lang$core$Time$onSelfMsg, 0, $gren_lang$core$Time$subMap);
var $gren_lang$core$Time$subscription = _Platform_leaf('Time');
var $gren_lang$core$Time$every$ = function(interval, tagger) {
	return $gren_lang$core$Time$subscription($gren_lang$core$Time$Every$(interval, tagger));
};
var $gren_lang$core$Time$every = F2($gren_lang$core$Time$every$);
var $gren_lang$core$Basics$fdiv = _Basics_fdiv;
var $blaix$gren_tui$Tui$framesPerSecond = 60.0;
var $gren_lang$node$Stream$Listen$ = function (a, b) {
	return { $: 0, a: a, b: b };
};
var $gren_lang$node$Stream$Listen = F2($gren_lang$node$Stream$Listen$);
var $gren_lang$node$Stream$init = $gren_lang$core$Task$succeed({ bz: $gren_lang$core$Dict$empty, aZ: $gren_lang$core$Dict$empty });
var $gren_lang$node$Stream$FromStream$ = function (a, b) {
	return { $: 0, a: a, b: b };
};
var $gren_lang$node$Stream$FromStream = F2($gren_lang$node$Stream$FromStream$);
var $gren_lang$node$Stream$attachListener = _Stream_attachListener;
var $gren_lang$core$Array$dropFirst$ = function(n, array) {
	return A3($gren_lang$core$Array$slice, n, $gren_lang$core$Array$length(array), array);
};
var $gren_lang$core$Array$dropFirst = F2($gren_lang$core$Array$dropFirst$);
var $gren_lang$core$Array$first = function(array) {
	return A2($gren_lang$core$Array$get, 0, array);
};
var $gren_lang$node$Stream$spawnHelp$ = function(router, toSpawn, processes) {
	var _v0 = $gren_lang$core$Array$first(toSpawn);
	if (_v0.$ === 1) {
		return $gren_lang$core$Task$succeed(processes);
	} else {
		var nextStream = _v0.a;
		var sid = nextStream.a;
		var rawStream = nextStream.b;
		var spawnStream = $gren_lang$core$Process$spawn(A2($gren_lang$node$Stream$attachListener, rawStream, function(data) {
					return A2($gren_lang$core$Platform$sendToSelf, router, $gren_lang$node$Stream$FromStream$(nextStream, data));
				}));
		var rest = $gren_lang$core$Array$dropFirst$(1, toSpawn);
		var spawnRest = function(processId) {
			return $gren_lang$node$Stream$spawnHelp$(router, rest, $gren_lang$core$Dict$set$(sid, processId, processes));
		};
		return A2($gren_lang$core$Task$andThen, spawnRest, spawnStream);
	}
};
var $gren_lang$node$Stream$spawnHelp = F3($gren_lang$node$Stream$spawnHelp$);
var $gren_lang$node$Stream$subToListener$ = function(sub, taggers) {
	var stream = sub.a;
	var sid = stream.a;
	var tagger = sub.b;
	var _v1 = $gren_lang$core$Dict$get$(sid, taggers);
	if (!_v1.$) {
		var data = _v1.a;
		return $gren_lang$core$Dict$set$(sid, _Utils_update(data, { aZ: $gren_lang$core$Array$pushLast$(tagger, data.aZ) }), taggers);
	} else {
		return $gren_lang$core$Dict$set$(sid, { bD: stream, aZ: [ tagger ] }, taggers);
	}
};
var $gren_lang$node$Stream$subToListener = F2($gren_lang$node$Stream$subToListener$);
var $gren_lang$node$Stream$onEffects$ = function(router, subs, state) {
	var newTaggers = A3($gren_lang$core$Array$foldl, $gren_lang$node$Stream$subToListener, $gren_lang$core$Dict$empty, subs);
	var toSpawn = A2($gren_lang$core$Array$map, function ($) {
			return $.bD;
		}, $gren_lang$core$Dict$values($gren_lang$core$Dict$diff$(newTaggers, state.aZ)));
	var killTasks = A3($gren_lang$core$Array$foldl, F2(function(id, tasks) {
				return A2($gren_lang$core$Task$andThen, function(_v2) {
						return $gren_lang$core$Process$kill(id);
					}, tasks);
			}), $gren_lang$core$Task$succeed({  }), $gren_lang$core$Dict$values($gren_lang$core$Dict$diff$(state.bz, newTaggers)));
	var existingProcesses = $gren_lang$core$Dict$filter$(F2(function(sid, _v1) {
				return $gren_lang$core$Dict$member$(sid, newTaggers);
			}), state.bz);
	return $gren_lang$core$Task$map$(function(newProcesses) {
			return { bz: newProcesses, aZ: newTaggers };
		}, A2($gren_lang$core$Task$andThen, function(_v0) {
				return $gren_lang$node$Stream$spawnHelp$(router, toSpawn, existingProcesses);
			}, killTasks));
};
var $gren_lang$node$Stream$onEffects = F3($gren_lang$node$Stream$onEffects$);
var $gren_lang$core$Maybe$map$ = function(f, maybe) {
	if (!maybe.$) {
		var value = maybe.a;
		return $gren_lang$core$Maybe$Just(f(value));
	} else {
		return $gren_lang$core$Maybe$Nothing;
	}
};
var $gren_lang$core$Maybe$map = F2($gren_lang$core$Maybe$map$);
var $gren_lang$core$Maybe$withDefault$ = function(_default, maybe) {
	if (!maybe.$) {
		var value = maybe.a;
		return value;
	} else {
		return _default;
	}
};
var $gren_lang$core$Maybe$withDefault = F2($gren_lang$core$Maybe$withDefault$);
var $gren_lang$node$Stream$onSelfMsg$ = function(router, event, state) {
	var _v1 = event.a;
	var sid = _v1.a;
	var data = event.b;
	return $gren_lang$core$Task$map$(function(_v3) {
			return state;
		}, A3($gren_lang$core$Array$foldl, F2(function(msg, tasks) {
					return A2($gren_lang$core$Task$andThen, function(_v2) {
							return A2($gren_lang$core$Platform$sendToApp, router, msg);
						}, tasks);
				}), $gren_lang$core$Task$succeed({  }), A2($gren_lang$core$Array$map, function(tagger) {
					return tagger(data);
				}, $gren_lang$core$Maybe$withDefault$([  ], $gren_lang$core$Maybe$map$(function ($) {
							return $.aZ;
						}, $gren_lang$core$Dict$get$(sid, state.aZ))))));
};
var $gren_lang$node$Stream$onSelfMsg = F3($gren_lang$node$Stream$onSelfMsg$);
var $gren_lang$node$Stream$subMap$ = function(mapFn, sub) {
	var stream = sub.a;
	var msgMap = sub.b;
	return $gren_lang$node$Stream$Listen$(stream, $gren_lang$core$Basics$composeL$(mapFn, msgMap));
};
var $gren_lang$node$Stream$subMap = F2($gren_lang$node$Stream$subMap$);
_Platform_effectManagers['Stream'] = _Platform_createManager($gren_lang$node$Stream$init, $gren_lang$node$Stream$onEffects, $gren_lang$node$Stream$onSelfMsg, 0, $gren_lang$node$Stream$subMap);
var $gren_lang$node$Stream$subscription = _Platform_leaf('Stream');
var $gren_lang$node$Stream$listen$ = function(stream, msgMap) {
	return $gren_lang$node$Stream$subscription($gren_lang$node$Stream$Listen$(stream, msgMap));
};
var $gren_lang$node$Stream$listen = F2($gren_lang$node$Stream$listen$);
var $gren_lang$node$Terminal$OnResize = $gren_lang$core$Basics$identity;
var $gren_lang$node$Terminal$init = $gren_lang$core$Task$succeed({ aw: $gren_lang$core$Maybe$Nothing, aZ: [  ] });
var $gren_lang$node$Terminal$SelfOnResize = $gren_lang$core$Basics$identity;
var $gren_lang$core$Basics$gt = _Utils_gt;
var $gren_lang$node$Terminal$onEffects$ = function(router, subs, state) {
	var extractTagger = F2(function(_v3, acc) {
			var tagger = _v3;
			return $gren_lang$core$Array$pushLast$(tagger, acc);
		});
	var newTaggers = A3($gren_lang$core$Array$foldl, extractTagger, [  ], subs);
	var subscriptionTask = function () {
		if ($gren_lang$core$Array$length(newTaggers) > 0) {
			var _v0 = state.aw;
			if (!_v0.$) {
				var pid = _v0.a;
				return $gren_lang$core$Task$succeed($gren_lang$core$Maybe$Just(pid));
			} else {
				return $gren_lang$core$Task$map$($gren_lang$core$Maybe$Just, $gren_lang$core$Process$spawn(_Terminal_attachListener(function(data) {
								return A2($gren_lang$core$Platform$sendToSelf, router, data);
							})));
			}
		} else {
			var _v1 = state.aw;
			if (!_v1.$) {
				var pid = _v1.a;
				return $gren_lang$core$Task$map$(function(_v2) {
						return $gren_lang$core$Maybe$Nothing;
					}, $gren_lang$core$Process$kill(pid));
			} else {
				return $gren_lang$core$Task$succeed($gren_lang$core$Maybe$Nothing);
			}
		}
	}();
	return A2($gren_lang$core$Task$andThen, function(maybeProcessId) {
			return $gren_lang$core$Task$succeed({ aw: maybeProcessId, aZ: newTaggers });
		}, subscriptionTask);
};
var $gren_lang$node$Terminal$onEffects = F3($gren_lang$node$Terminal$onEffects$);
var $gren_lang$node$Terminal$onSelfMsg$ = function(router, event, state) {
	var newSize = event;
	return $gren_lang$core$Task$map$(function(_v2) {
			return state;
		}, A3($gren_lang$core$Array$foldl, F2(function(msg, tasks) {
					return A2($gren_lang$core$Task$andThen, function(_v1) {
							return A2($gren_lang$core$Platform$sendToApp, router, msg);
						}, tasks);
				}), $gren_lang$core$Task$succeed({  }), A2($gren_lang$core$Array$map, function(tagger) {
					return tagger(newSize);
				}, state.aZ)));
};
var $gren_lang$node$Terminal$onSelfMsg = F3($gren_lang$node$Terminal$onSelfMsg$);
var $gren_lang$node$Terminal$subMap$ = function(mapFn, sub) {
	var msgMap = sub;
	return $gren_lang$core$Basics$composeL$(mapFn, msgMap);
};
var $gren_lang$node$Terminal$subMap = F2($gren_lang$node$Terminal$subMap$);
_Platform_effectManagers['Terminal'] = _Platform_createManager($gren_lang$node$Terminal$init, $gren_lang$node$Terminal$onEffects, $gren_lang$node$Terminal$onSelfMsg, 0, $gren_lang$node$Terminal$subMap);
var $gren_lang$node$Terminal$subscription = _Platform_leaf('Terminal');
var $gren_lang$node$Terminal$onResize$ = function(_v0, toMsg) {
	return $gren_lang$node$Terminal$subscription(toMsg);
};
var $gren_lang$node$Terminal$onResize = F2($gren_lang$node$Terminal$onResize$);
var $blaix$gren_tui$Tui$subscriptions$ = function(appSubs, model) {
	return $gren_lang$core$Platform$Sub$batch([ $gren_lang$node$Stream$listen$(model.am, $blaix$gren_tui$Tui$GotStdin), A2($gren_lang$core$Platform$Sub$map, $blaix$gren_tui$Tui$AppMsg, appSubs(model.U)), model.V ? $gren_lang$core$Time$every$(1000 / $blaix$gren_tui$Tui$framesPerSecond, $blaix$gren_tui$Tui$Tick) : $gren_lang$core$Platform$Sub$none, function () {
			var _v0 = model.a0;
			if (!_v0.$) {
				var termPermission = _v0.a;
				return $gren_lang$node$Terminal$onResize$(termPermission, $blaix$gren_tui$Tui$TerminalResized);
			} else {
				return $gren_lang$core$Platform$Sub$none;
			}
		}() ]);
};
var $blaix$gren_tui$Tui$subscriptions = F2($blaix$gren_tui$Tui$subscriptions$);
var $blaix$gren_ansi$Ansi$Full = 2;
var $blaix$gren_ansi$Ansi$Up = 0;
var $gren_lang$core$Array$findFirst = _Array_findFirst;
var $gren_lang$core$Array$any$ = function(fn, array) {
	var _v0 = A2($gren_lang$core$Array$findFirst, fn, array);
	if (!_v0.$) {
		return true;
	} else {
		return false;
	}
};
var $gren_lang$core$Array$any = F2($gren_lang$core$Array$any$);
var $blaix$gren_tui$Tui$appUpdate$ = function(appUpdate_, appMsg, model) {
	var appUpdateResult = A2(appUpdate_, appMsg, model.U);
	var newModel = _Utils_update(model, { U: appUpdateResult.bp });
	return { ba: A2($gren_lang$core$Platform$Cmd$map, $blaix$gren_tui$Tui$AppMsg, appUpdateResult.ba), bp: newModel };
};
var $blaix$gren_tui$Tui$appUpdate = F3($blaix$gren_tui$Tui$appUpdate$);
var $blaix$gren_tui$Tui$CtrlC = { $: 10 };
var $blaix$gren_tui$Tui$UnknownInput = { $: 11 };
var $gren_lang$core$Bytes$Encode$encode = _Bytes_encode;
var $gren_lang$core$Bytes$Encode$U8 = function (a) {
	return { $: 3, a: a };
};
var $gren_lang$core$Bytes$Encode$unsignedInt8 = $gren_lang$core$Bytes$Encode$U8;
var $blaix$gren_tui$Tui$ctrlC = $gren_lang$core$Bytes$Encode$encode($gren_lang$core$Bytes$Encode$unsignedInt8(3));
var $gren_lang$core$Bytes$Decode$decode$ = function(_v0, bs) {
	var decoder = _v0;
	return A2(_Bytes_decode, decoder, bs);
};
var $gren_lang$core$Bytes$Decode$decode = F2($gren_lang$core$Bytes$Decode$decode$);
var $gren_lang$core$Bytes$length = _Bytes_length;
var $gren_lang$core$Bytes$Decode$Decoder = $gren_lang$core$Basics$identity;
var $gren_lang$core$Bytes$Decode$andThen$ = function(callback, _v0) {
	var decodeA = _v0;
	return F2(function(bites, offset) {
			var _new = A2(decodeA, bites, offset);
			var _v1 = callback(_new.f);
			var decodeB = _v1;
			return A2(decodeB, bites, _new.e);
		});
};
var $gren_lang$core$Bytes$Decode$andThen = F2($gren_lang$core$Bytes$Decode$andThen$);
var $gren_lang$core$Bytes$Decode$bytes = function(n) {
	return _Bytes_read_bytes(n);
};
var $gren_lang$core$Bytes$Decode$fail = _Bytes_decodeFailure;
var $gren_lang$core$Bytes$Decode$succeed = function(a) {
	return F2(function(_v0, offset) {
			return { e: offset, f: a };
		});
};
var $gren_lang$core$Bytes$toString = _Bytes_toString;
var $gren_lang$core$Bytes$Decode$string = function(n) {
	return $gren_lang$core$Bytes$Decode$andThen$(function(bits) {
			var _v0 = $gren_lang$core$Bytes$toString(bits);
			if (!_v0.$) {
				var str = _v0.a;
				return $gren_lang$core$Bytes$Decode$succeed(str);
			} else {
				return $gren_lang$core$Bytes$Decode$fail;
			}
		}, $gren_lang$core$Bytes$Decode$bytes(n));
};
var $blaix$gren_tui$Tui$ArrowDown = { $: 6 };
var $blaix$gren_tui$Tui$ArrowLeft = { $: 7 };
var $blaix$gren_tui$Tui$ArrowRight = { $: 8 };
var $blaix$gren_tui$Tui$ArrowUp = { $: 5 };
var $blaix$gren_tui$Tui$Escape = { $: 4 };
var $blaix$gren_tui$Tui$KeyChar = function (a) {
	return { $: 0, a: a };
};
var $blaix$gren_tui$Tui$Return = { $: 3 };
var $blaix$gren_tui$Tui$Space = { $: 2 };
var $blaix$gren_tui$Tui$Tab = { $: 1 };
var $blaix$gren_ansi$Ansi$arrowDown = $blaix$gren_ansi$Ansi$prefix + 'B';
var $blaix$gren_ansi$Ansi$arrowLeft = $blaix$gren_ansi$Ansi$prefix + 'D';
var $blaix$gren_ansi$Ansi$arrowRight = $blaix$gren_ansi$Ansi$prefix + 'C';
var $blaix$gren_ansi$Ansi$arrowUp = $blaix$gren_ansi$Ansi$prefix + 'A';
var $blaix$gren_tui$Tui$CursorReport$ = function (a, b) {
	return { $: 9, a: a, b: b };
};
var $blaix$gren_tui$Tui$CursorReport = F2($blaix$gren_tui$Tui$CursorReport$);
var $gren_lang$core$Array$flatten = _Array_flat;
var $gren_lang$core$String$toInt = _String_toInt;
var $blaix$gren_tui$Tui$checkCursorReport = function(string) {
	var parts = $gren_lang$core$Array$flatten(A2($gren_lang$core$Array$map, $gren_lang$core$String$split('R'), $gren_lang$core$Array$flatten(A2($gren_lang$core$Array$map, $gren_lang$core$String$split(';'), A2($gren_lang$core$String$split, '[', string)))));
	if (((parts.length === 4) && (parts[0] === '\u001B')) && (parts[3] === '')) {
		var row = parts[1];
		var col = parts[2];
		var parsed = { bV: $gren_lang$core$String$toInt(col), co: $gren_lang$core$String$toInt(row) };
		if ((!parsed.co.$) && (!parsed.bV.$)) {
			var r = parsed.co.a;
			var c = parsed.bV.a;
			return $gren_lang$core$Maybe$Just($blaix$gren_tui$Tui$CursorReport$(r, c));
		} else {
			return $gren_lang$core$Maybe$Nothing;
		}
	} else {
		return $gren_lang$core$Maybe$Nothing;
	}
};
var $blaix$gren_tui$Tui$stringToInput = function(string) {
	var _v0 = $blaix$gren_tui$Tui$checkCursorReport(string);
	if (!_v0.$) {
		var cursorReport = _v0.a;
		return cursorReport;
	} else {
		return _Utils_eq(string, $blaix$gren_ansi$Ansi$arrowUp) ? $blaix$gren_tui$Tui$ArrowUp : (_Utils_eq(string, $blaix$gren_ansi$Ansi$arrowDown) ? $blaix$gren_tui$Tui$ArrowDown : (_Utils_eq(string, $blaix$gren_ansi$Ansi$arrowRight) ? $blaix$gren_tui$Tui$ArrowRight : (_Utils_eq(string, $blaix$gren_ansi$Ansi$arrowLeft) ? $blaix$gren_tui$Tui$ArrowLeft : (_Utils_eq(string, $blaix$gren_ansi$Ansi$escape) ? $blaix$gren_tui$Tui$Escape : ((string === '\t') ? $blaix$gren_tui$Tui$Tab : ((string === '\r') ? $blaix$gren_tui$Tui$Return : ((string === ' ') ? $blaix$gren_tui$Tui$Space : $blaix$gren_tui$Tui$KeyChar(string))))))));
	}
};
var $blaix$gren_tui$Tui$bytesToInput = function(bytes) {
	return _Utils_eq(bytes, $blaix$gren_tui$Tui$ctrlC) ? $blaix$gren_tui$Tui$CtrlC : $gren_lang$core$Maybe$withDefault$($blaix$gren_tui$Tui$UnknownInput, $gren_lang$core$Maybe$map$($blaix$gren_tui$Tui$stringToInput, function(decoder) {
				return $gren_lang$core$Bytes$Decode$decode$(decoder, bytes);
			}($gren_lang$core$Bytes$Decode$string($gren_lang$core$Bytes$length(bytes)))));
};
var $blaix$gren_ansi$Ansi$directionString = function(direction) {
	switch (direction) {
		case 1:
			return '0';
		case 0:
			return '1';
		default:
			return '2';
	}
};
var $blaix$gren_ansi$Ansi$clearLine = function(direction) {
	return $blaix$gren_ansi$Ansi$prefix + ($blaix$gren_ansi$Ansi$directionString(direction) + 'K');
};
var $blaix$gren_ansi$Ansi$clearScreen = function(direction) {
	return $blaix$gren_ansi$Ansi$prefix + ($blaix$gren_ansi$Ansi$directionString(direction) + 'J');
};
var $blaix$gren_ansi$Ansi$reset = $blaix$gren_ansi$Ansi$prefix + '0m';
var $blaix$gren_ansi$Ansi$showCursor = $blaix$gren_ansi$Ansi$prefix + '?25h';
var $blaix$gren_tui$Tui$cleanup = function(stream) {
	return $gren_lang$node$Stream$sendString$(stream, '\n' + ($blaix$gren_ansi$Ansi$reset + $blaix$gren_ansi$Ansi$showCursor));
};
var $gren_lang$node$Node$exit = $gren_lang$node$Node$exitWithCode(0);
var $blaix$gren_tui$Tui$exit = function(stdout) {
	return A2($gren_lang$core$Task$andThen, function(_v0) {
			return $gren_lang$node$Node$exit;
		}, $blaix$gren_tui$Tui$cleanup(stdout));
};
var $gren_lang$core$Array$initialize = _Array_initialize;
var $blaix$gren_tui$SingleLine$empty = '';
var $gren_lang$core$Array$maximum = function(array) {
	var _v0 = $gren_lang$core$Array$first(array);
	if (_v0.$ === 1) {
		return $gren_lang$core$Maybe$Nothing;
	} else {
		var val = _v0.a;
		return $gren_lang$core$Maybe$Just(A3($gren_lang$core$Array$foldl, F2(function(current, highest) {
						return (_Utils_cmp(current, highest) > 0) ? current : highest;
					}), val, array));
	}
};
var $gren_lang$core$Array$repeat$ = function(n, val) {
	return A3($gren_lang$core$Array$initialize, n, 0, function(_v0) {
			return val;
		});
};
var $gren_lang$core$Array$repeat = F2($gren_lang$core$Array$repeat$);
var $gren_lang$core$Basics$sub = _Basics_sub;
var $blaix$gren_tui$UI$normalizeHeight$ = function(parentAttrs, allGrids) {
	var maxRows = $gren_lang$core$Maybe$withDefault$(0, $gren_lang$core$Array$maximum(A2($gren_lang$core$Array$map, $gren_lang$core$Array$length, allGrids)));
	return A2($gren_lang$core$Array$map, function(g) {
			var diff = maxRows - $gren_lang$core$Array$length(g);
			var extraRows = $gren_lang$core$Array$repeat$(diff, [ { p: parentAttrs, l: $blaix$gren_tui$SingleLine$empty } ]);
			return _Utils_ap(g, extraRows);
		}, allGrids);
};
var $blaix$gren_tui$UI$normalizeHeight = F2($blaix$gren_tui$UI$normalizeHeight$);
var $blaix$gren_tui$UI$emptyCell = { p: [  ], l: $blaix$gren_tui$SingleLine$empty };
var $blaix$gren_array2d$Array2d$map$ = function(fn, array2d) {
	return A2($gren_lang$core$Array$map, function(row) {
			return A2($gren_lang$core$Array$map, fn, row);
		}, array2d);
};
var $blaix$gren_array2d$Array2d$map = F2($blaix$gren_array2d$Array2d$map$);
var $blaix$gren_tui$SingleLine$toString = function(_v0) {
	var string = _v0;
	return string;
};
var $blaix$gren_ansi$Ansi$Internal$Ambiguous = 4;
var $blaix$gren_ansi$Ansi$Internal$FullWidth = 0;
var $blaix$gren_ansi$Ansi$Internal$HalfWidth = 1;
var $blaix$gren_ansi$Ansi$Internal$Narrow = 3;
var $blaix$gren_ansi$Ansi$Internal$Natural = 5;
var $blaix$gren_ansi$Ansi$Internal$Wide = 2;


var _Bitwise_and = F2(function (a, b) {
  return a & b;
});

var _Bitwise_or = F2(function (a, b) {
  return a | b;
});

var _Bitwise_xor = F2(function (a, b) {
  return a ^ b;
});

function _Bitwise_complement(a) {
  return ~a;
}

var _Bitwise_countLeadingZeros = Math.clz32;

var _Bitwise_shiftLeftBy = F2(function (offset, a) {
  return a << offset;
});

var _Bitwise_shiftRightBy = F2(function (offset, a) {
  return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function (offset, a) {
  return a >>> offset;
});
var $gren_lang$core$Bitwise$and = _Bitwise_and;
var $gren_lang$core$Bitwise$or = _Bitwise_or;
var $gren_lang$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $blaix$gren_ansi$Ansi$Internal$getCodePoint = function(_v0) {
	var x = _v0.b;
	var y = _v0.c;
	return (((55296 <= x) && (x <= 56319)) && ((56320 <= y) && (y <= 57343))) ? function(codePoint_) {
		return codePoint_ + 65536;
	}((y & 1023) | ((1023 & x) << 10)) : x;
};
var $blaix$gren_ansi$Ansi$Internal$eastAsianWidthHelper$ = function(x, y) {
	var codePoint = $blaix$gren_ansi$Ansi$Internal$getCodePoint({ b: x, c: y });
	return ((12288 === codePoint) || (((65281 <= codePoint) && (codePoint <= 65376)) || ((65504 <= codePoint) && (codePoint <= 65510)))) ? 0 : (((8361 === codePoint) || (((65377 <= codePoint) && (codePoint <= 65470)) || (((65474 <= codePoint) && (codePoint <= 65479)) || (((65482 <= codePoint) && (codePoint <= 65487)) || (((65490 <= codePoint) && (codePoint <= 65495)) || (((65498 <= codePoint) && (codePoint <= 65500)) || ((65512 <= codePoint) && (codePoint <= 65518)))))))) ? 1 : ((((4352 <= codePoint) && (codePoint <= 4447)) || (((4515 <= codePoint) && (codePoint <= 4519)) || (((4602 <= codePoint) && (codePoint <= 4607)) || (((9001 <= codePoint) && (codePoint <= 9002)) || (((11904 <= codePoint) && (codePoint <= 11929)) || (((11931 <= codePoint) && (codePoint <= 12019)) || (((12032 <= codePoint) && (codePoint <= 12245)) || (((12272 <= codePoint) && (codePoint <= 12283)) || (((12289 <= codePoint) && (codePoint <= 12350)) || (((12353 <= codePoint) && (codePoint <= 12438)) || (((12441 <= codePoint) && (codePoint <= 12543)) || (((12549 <= codePoint) && (codePoint <= 12589)) || (((12593 <= codePoint) && (codePoint <= 12686)) || (((12688 <= codePoint) && (codePoint <= 12730)) || (((12736 <= codePoint) && (codePoint <= 12771)) || (((12784 <= codePoint) && (codePoint <= 12830)) || (((12832 <= codePoint) && (codePoint <= 12871)) || (((12880 <= codePoint) && (codePoint <= 13054)) || (((13056 <= codePoint) && (codePoint <= 19903)) || (((19968 <= codePoint) && (codePoint <= 42124)) || (((42128 <= codePoint) && (codePoint <= 42182)) || (((43360 <= codePoint) && (codePoint <= 43388)) || (((44032 <= codePoint) && (codePoint <= 55203)) || (((55216 <= codePoint) && (codePoint <= 55238)) || (((55243 <= codePoint) && (codePoint <= 55291)) || (((63744 <= codePoint) && (codePoint <= 64255)) || (((65040 <= codePoint) && (codePoint <= 65049)) || (((65072 <= codePoint) && (codePoint <= 65106)) || (((65108 <= codePoint) && (codePoint <= 65126)) || (((65128 <= codePoint) && (codePoint <= 65131)) || (((110592 <= codePoint) && (codePoint <= 110593)) || (((127488 <= codePoint) && (codePoint <= 127490)) || (((127504 <= codePoint) && (codePoint <= 127546)) || (((127552 <= codePoint) && (codePoint <= 127560)) || (((127568 <= codePoint) && (codePoint <= 127569)) || (((131072 <= codePoint) && (codePoint <= 194367)) || (((177984 <= codePoint) && (codePoint <= 196605)) || ((196608 <= codePoint) && (codePoint <= 262141))))))))))))))))))))))))))))))))))))))) ? 2 : ((((32 <= codePoint) && (codePoint <= 126)) || (((162 <= codePoint) && (codePoint <= 163)) || (((165 <= codePoint) && (codePoint <= 166)) || ((172 === codePoint) || ((175 === codePoint) || (((10214 <= codePoint) && (codePoint <= 10221)) || ((10629 <= codePoint) && (codePoint <= 10630)))))))) ? 3 : (((161 === codePoint) || ((164 === codePoint) || (((167 <= codePoint) && (codePoint <= 168)) || ((170 === codePoint) || (((173 <= codePoint) && (codePoint <= 174)) || (((176 <= codePoint) && (codePoint <= 180)) || (((182 <= codePoint) && (codePoint <= 186)) || (((188 <= codePoint) && (codePoint <= 191)) || ((198 === codePoint) || ((208 === codePoint) || (((215 <= codePoint) && (codePoint <= 216)) || (((222 <= codePoint) && (codePoint <= 225)) || ((230 === codePoint) || (((232 <= codePoint) && (codePoint <= 234)) || (((236 <= codePoint) && (codePoint <= 237)) || ((240 === codePoint) || (((242 <= codePoint) && (codePoint <= 243)) || (((247 <= codePoint) && (codePoint <= 250)) || ((252 === codePoint) || ((254 === codePoint) || ((257 === codePoint) || ((273 === codePoint) || ((275 === codePoint) || ((283 === codePoint) || (((294 <= codePoint) && (codePoint <= 295)) || ((299 === codePoint) || (((305 <= codePoint) && (codePoint <= 307)) || ((312 === codePoint) || (((319 <= codePoint) && (codePoint <= 322)) || ((324 === codePoint) || (((328 <= codePoint) && (codePoint <= 331)) || ((333 === codePoint) || (((338 <= codePoint) && (codePoint <= 339)) || (((358 <= codePoint) && (codePoint <= 359)) || ((363 === codePoint) || ((462 === codePoint) || ((464 === codePoint) || ((466 === codePoint) || ((468 === codePoint) || ((470 === codePoint) || ((472 === codePoint) || ((474 === codePoint) || ((476 === codePoint) || ((593 === codePoint) || ((609 === codePoint) || ((708 === codePoint) || ((711 === codePoint) || (((713 <= codePoint) && (codePoint <= 715)) || ((717 === codePoint) || ((720 === codePoint) || (((728 <= codePoint) && (codePoint <= 731)) || ((733 === codePoint) || ((735 === codePoint) || (((768 <= codePoint) && (codePoint <= 879)) || (((913 <= codePoint) && (codePoint <= 929)) || (((931 <= codePoint) && (codePoint <= 937)) || (((945 <= codePoint) && (codePoint <= 961)) || (((963 <= codePoint) && (codePoint <= 969)) || ((1025 === codePoint) || (((1040 <= codePoint) && (codePoint <= 1103)) || ((1105 === codePoint) || ((8208 === codePoint) || (((8211 <= codePoint) && (codePoint <= 8214)) || (((8216 <= codePoint) && (codePoint <= 8217)) || (((8220 <= codePoint) && (codePoint <= 8221)) || (((8224 <= codePoint) && (codePoint <= 8226)) || (((8228 <= codePoint) && (codePoint <= 8231)) || ((8240 === codePoint) || (((8242 <= codePoint) && (codePoint <= 8243)) || ((8245 === codePoint) || ((8251 === codePoint) || ((8254 === codePoint) || ((8308 === codePoint) || ((8319 === codePoint) || (((8321 <= codePoint) && (codePoint <= 8324)) || ((8364 === codePoint) || ((8451 === codePoint) || ((8453 === codePoint) || ((8457 === codePoint) || ((8467 === codePoint) || ((8470 === codePoint) || (((8481 <= codePoint) && (codePoint <= 8482)) || ((8486 === codePoint) || ((8491 === codePoint) || (((8531 <= codePoint) && (codePoint <= 8532)) || (((8539 <= codePoint) && (codePoint <= 8542)) || (((8544 <= codePoint) && (codePoint <= 8555)) || (((8560 <= codePoint) && (codePoint <= 8569)) || ((8585 === codePoint) || (((8592 <= codePoint) && (codePoint <= 8601)) || (((8632 <= codePoint) && (codePoint <= 8633)) || ((8658 === codePoint) || ((8660 === codePoint) || ((8679 === codePoint) || ((8704 === codePoint) || (((8706 <= codePoint) && (codePoint <= 8707)) || (((8711 <= codePoint) && (codePoint <= 8712)) || ((8715 === codePoint) || ((8719 === codePoint) || ((8721 === codePoint) || ((8725 === codePoint) || ((8730 === codePoint) || (((8733 <= codePoint) && (codePoint <= 8736)) || ((8739 === codePoint) || ((8741 === codePoint) || (((8743 <= codePoint) && (codePoint <= 8748)) || ((8750 === codePoint) || (((8756 <= codePoint) && (codePoint <= 8759)) || (((8764 <= codePoint) && (codePoint <= 8765)) || ((8776 === codePoint) || ((8780 === codePoint) || ((8786 === codePoint) || (((8800 <= codePoint) && (codePoint <= 8801)) || (((8804 <= codePoint) && (codePoint <= 8807)) || (((8810 <= codePoint) && (codePoint <= 8811)) || (((8814 <= codePoint) && (codePoint <= 8815)) || (((8834 <= codePoint) && (codePoint <= 8835)) || (((8838 <= codePoint) && (codePoint <= 8839)) || ((8853 === codePoint) || ((8857 === codePoint) || ((8869 === codePoint) || ((8895 === codePoint) || ((8978 === codePoint) || (((9312 <= codePoint) && (codePoint <= 9449)) || (((9451 <= codePoint) && (codePoint <= 9547)) || (((9552 <= codePoint) && (codePoint <= 9587)) || (((9600 <= codePoint) && (codePoint <= 9615)) || (((9618 <= codePoint) && (codePoint <= 9621)) || (((9632 <= codePoint) && (codePoint <= 9633)) || (((9635 <= codePoint) && (codePoint <= 9641)) || (((9650 <= codePoint) && (codePoint <= 9651)) || (((9654 <= codePoint) && (codePoint <= 9655)) || (((9660 <= codePoint) && (codePoint <= 9661)) || (((9664 <= codePoint) && (codePoint <= 9665)) || (((9670 <= codePoint) && (codePoint <= 9672)) || ((9675 === codePoint) || (((9678 <= codePoint) && (codePoint <= 9681)) || (((9698 <= codePoint) && (codePoint <= 9701)) || ((9711 === codePoint) || (((9733 <= codePoint) && (codePoint <= 9734)) || ((9737 === codePoint) || (((9742 <= codePoint) && (codePoint <= 9743)) || (((9748 <= codePoint) && (codePoint <= 9749)) || ((9756 === codePoint) || ((9758 === codePoint) || ((9792 === codePoint) || ((9794 === codePoint) || (((9824 <= codePoint) && (codePoint <= 9825)) || (((9827 <= codePoint) && (codePoint <= 9829)) || (((9831 <= codePoint) && (codePoint <= 9834)) || (((9836 <= codePoint) && (codePoint <= 9837)) || ((9839 === codePoint) || (((9886 <= codePoint) && (codePoint <= 9887)) || (((9918 <= codePoint) && (codePoint <= 9919)) || (((9924 <= codePoint) && (codePoint <= 9933)) || (((9935 <= codePoint) && (codePoint <= 9953)) || ((9955 === codePoint) || (((9960 <= codePoint) && (codePoint <= 9983)) || ((10045 === codePoint) || ((10071 === codePoint) || (((10102 <= codePoint) && (codePoint <= 10111)) || (((11093 <= codePoint) && (codePoint <= 11097)) || (((12872 <= codePoint) && (codePoint <= 12879)) || (((57344 <= codePoint) && (codePoint <= 63743)) || (((65024 <= codePoint) && (codePoint <= 65039)) || ((65533 === codePoint) || (((127232 <= codePoint) && (codePoint <= 127242)) || (((127248 <= codePoint) && (codePoint <= 127277)) || (((127280 <= codePoint) && (codePoint <= 127337)) || (((127344 <= codePoint) && (codePoint <= 127386)) || (((917760 <= codePoint) && (codePoint <= 917999)) || (((983040 <= codePoint) && (codePoint <= 1048573)) || ((1048576 <= codePoint) && (codePoint <= 1114109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ? 4 : 5))));
};
var $blaix$gren_ansi$Ansi$Internal$eastAsianWidthHelper = F2($blaix$gren_ansi$Ansi$Internal$eastAsianWidthHelper$);
var $gren_lang$core$String$foldl = _String_foldl;
var $gren_lang$core$String$toArray = function(string) {
	return A3($gren_lang$core$String$foldl, $gren_lang$core$Array$pushLast, [  ], string);
};
var $blaix$gren_ansi$Ansi$Internal$eastAsianWidth = function(character) {
	var _v0 = $gren_lang$core$String$toArray(character);
	switch (_v0.length) {
		case 1:
			var _char = _v0[0];
			return $gren_lang$core$Maybe$Just($blaix$gren_ansi$Ansi$Internal$eastAsianWidthHelper$($gren_lang$core$Char$toCode(_char), 0));
		case 2:
			var char1 = _v0[0];
			var char2 = _v0[1];
			return $gren_lang$core$Maybe$Just($blaix$gren_ansi$Ansi$Internal$eastAsianWidthHelper$($gren_lang$core$Char$toCode(char1), $gren_lang$core$Char$toCode(char2)));
		default:
			return $gren_lang$core$Maybe$Nothing;
	}
};


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function (options, string) {
  if (string.trim().length === 0) {
    return $gren_lang$core$Maybe$Nothing;
  }

  var flags = "g";
  if (options.cb) {
    flags += "m";
  }
  if (options.bT) {
    flags += "i";
  }

  try {
    return $gren_lang$core$Maybe$Just(new RegExp(string, flags));
  } catch (error) {
    return $gren_lang$core$Maybe$Nothing;
  }
});

// USE

var _Regex_contains = F2(function (re, string) {
  return string.match(re) !== null;
});

var _Regex_findAtMost = F3(function (n, re, str) {
  var out = [];
  var number = 0;
  var string = str;
  var lastIndex = re.lastIndex;
  var prevLastIndex = -1;
  var result;
  while (number++ < n && (result = re.exec(string))) {
    if (prevLastIndex == re.lastIndex) break;
    var i = result.length - 1;
    var subs = new Array(i);
    while (i > 0) {
      var submatch = result[i];
      subs[--i] = submatch ? $gren_lang$core$Maybe$Just(submatch) : $gren_lang$core$Maybe$Nothing;
    }
    out.push({
      bn: result[0],
      bj: result.index,
      bt: number,
      bE: subs,
    });
    prevLastIndex = re.lastIndex;
  }
  re.lastIndex = lastIndex;
  return out;
});

var _Regex_replaceAtMost = F4(function (n, re, replacer, string) {
  var count = 0;
  function jsReplacer(match) {
    if (count++ >= n) {
      return match;
    }
    var i = arguments.length - 3;
    var submatches = new Array(i);
    while (i > 0) {
      var submatch = arguments[i];
      submatches[--i] = submatch ? $gren_lang$core$Maybe$Just(submatch) : $gren_lang$core$Maybe$Nothing;
    }
    return replacer({
      bn: match,
      bj: arguments[arguments.length - 2],
      bt: count,
      bE: submatches,
    });
  }
  return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function (n, re, str) {
  return str.split(re, n);
});

var _Regex_infinity = Number.MAX_SAFE_INTEGER;
var $gren_lang$core$String$Regex$fromStringWith = _Regex_fromStringWith;
var $gren_lang$core$String$Regex$fromString = function(string) {
	return A2($gren_lang$core$String$Regex$fromStringWith, { bT: false, cb: false }, string);
};
var $gren_lang$core$String$Regex$never = _Regex_never;
var $blaix$gren_ansi$Ansi$emojiRegex = $gren_lang$core$Maybe$withDefault$($gren_lang$core$String$Regex$never, $gren_lang$core$String$Regex$fromString('[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC3\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC08\\uDC26](?:\\u200D\\u2B1B)?|[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)'));
var $gren_lang$core$String$cons = _String_cons;
var $gren_lang$core$String$fromChar = function(_char) {
	return A2($gren_lang$core$String$cons, _char, '');
};
var $gren_lang$core$Basics$ge = _Utils_ge;
var $gren_lang$core$String$isEmpty = function(string) {
	return string === '';
};
var $gren_lang$core$String$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $blaix$gren_ansi$Ansi$regex = $gren_lang$core$Maybe$withDefault$($gren_lang$core$String$Regex$never, $gren_lang$core$String$Regex$fromString(A2($gren_lang$core$String$join, '|', [ '[\u001B\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))' ])));
var $blaix$gren_ansi$Ansi$strip = A2($gren_lang$core$String$Regex$replace, $blaix$gren_ansi$Ansi$regex, function(_v0) {
		return '';
	});
var $blaix$gren_ansi$Ansi$width = function(str) {
	if ($gren_lang$core$String$isEmpty(str)) {
		return 0;
	} else {
		var withoutAnsi = $blaix$gren_ansi$Ansi$strip(str);
		if ($gren_lang$core$String$isEmpty(withoutAnsi)) {
			return 0;
		} else {
			var replacedEmojis = A3($gren_lang$core$String$Regex$replace, $blaix$gren_ansi$Ansi$emojiRegex, function(_v4) {
					return '  ';
				}, withoutAnsi);
			return A3($gren_lang$core$String$foldl, F2(function(_char, total) {
						var codePoint = $gren_lang$core$Char$toCode(_char);
						if ((codePoint <= 31) || (((codePoint >= 127) && (codePoint <= 159)) || ((codePoint >= 768) && (codePoint <= 879)))) {
							return total;
						} else {
							var _v0 = $blaix$gren_ansi$Ansi$Internal$eastAsianWidth($gren_lang$core$String$fromChar(_char));
							if (!_v0.$) {
								switch (_v0.a) {
									case 0:
										var _v1 = _v0.a;
										return total + 2;
									case 2:
										var _v2 = _v0.a;
										return total + 2;
									case 4:
										var _v3 = _v0.a;
										return total + 1;
									default:
										return total + 1;
								}
							} else {
								return total;
							}
						}
					}), 0, replacedEmojis);
		}
	}
};
var $blaix$gren_tui$UI$gridWidth = function(grid) {
	return $gren_lang$core$Maybe$withDefault$(0, $gren_lang$core$Array$maximum(A2($gren_lang$core$Array$map, A2($gren_lang$core$Array$foldl, $gren_lang$core$Basics$add, 0), $blaix$gren_array2d$Array2d$map$($blaix$gren_ansi$Ansi$width, $blaix$gren_array2d$Array2d$map$($blaix$gren_tui$SingleLine$toString, $blaix$gren_array2d$Array2d$map$(function ($) {
								return $.l;
							}, grid))))));
};
var $gren_lang$core$String$length = _String_length;
var $gren_lang$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $gren_lang$core$String$repeatHelp$ = function(n, chunk, result) {
	return (n <= 0) ? result : $gren_lang$core$String$repeatHelp$(n >> 1, _Utils_ap(chunk, chunk), ((n & 1) === 0) ? result : _Utils_ap(result, chunk));
};
var $gren_lang$core$String$repeatHelp = F3($gren_lang$core$String$repeatHelp$);
var $gren_lang$core$String$repeat$ = function(n, chunk) {
	return $gren_lang$core$String$repeatHelp$(n, chunk, '');
};
var $gren_lang$core$String$repeat = F2($gren_lang$core$String$repeat$);
var $gren_lang$core$String$padRight$ = function(n, _char, string) {
	return _Utils_ap(string, $gren_lang$core$String$repeat$(n - $gren_lang$core$String$length(string), $gren_lang$core$String$fromChar(_char)));
};
var $gren_lang$core$String$padRight = F3($gren_lang$core$String$padRight$);
var $blaix$gren_tui$SingleLine$padRight$ = function(desiredWidth, _v0) {
	var string = _v0;
	return $gren_lang$core$String$padRight$(desiredWidth, ' ', string);
};
var $blaix$gren_tui$SingleLine$padRight = F2($blaix$gren_tui$SingleLine$padRight$);
var $gren_lang$core$Array$dropLast$ = function(n, array) {
	return A3($gren_lang$core$Array$slice, 0, $gren_lang$core$Array$length(array) - n, array);
};
var $gren_lang$core$Array$dropLast = F2($gren_lang$core$Array$dropLast$);
var $gren_lang$core$Basics$negate = function(n) {
	return -n;
};
var $gren_lang$core$Array$last = function(array) {
	return A2($gren_lang$core$Array$get, -1, array);
};
var $gren_lang$core$Array$popLast = function(array) {
	var _v0 = $gren_lang$core$Array$last(array);
	if (!_v0.$) {
		var value = _v0.a;
		return $gren_lang$core$Maybe$Just({ bk: $gren_lang$core$Array$dropLast$(1, array), aN: value });
	} else {
		return $gren_lang$core$Maybe$Nothing;
	}
};
var $blaix$gren_tui$SingleLine$width = function(_v0) {
	var string = _v0;
	return $blaix$gren_ansi$Ansi$width(string);
};
var $blaix$gren_tui$UI$normalizeWidth = function(grid) {
	var targetWidth = $blaix$gren_tui$UI$gridWidth(grid);
	return A2($gren_lang$core$Array$map, function(thisRow) {
			var thisRowWidth = A3($gren_lang$core$Array$foldl, $gren_lang$core$Basics$add, 0, A2($gren_lang$core$Array$map, $blaix$gren_tui$SingleLine$width, A2($gren_lang$core$Array$map, function ($) {
							return $.l;
						}, thisRow)));
			var popped = $gren_lang$core$Maybe$withDefault$({ bk: [  ], aN: $blaix$gren_tui$UI$emptyCell }, $gren_lang$core$Array$popLast(thisRow));
			var lastCellContent = popped.aN.l;
			var diff = targetWidth - thisRowWidth;
			var lastCellTargetWidth = $blaix$gren_tui$SingleLine$width(lastCellContent) + diff;
			var newLastCellContent = $blaix$gren_tui$SingleLine$padRight$(lastCellTargetWidth, lastCellContent);
			var paddedCell = _Utils_update(popped.aN, { l: newLastCellContent });
			return $gren_lang$core$Array$pushLast$(paddedCell, popped.bk);
		}, grid);
};
var $blaix$gren_tui$UI$joinHorizontal$ = function(parentAttrs, grids) {
	var normalizedGrids = A2($gren_lang$core$Array$map, $blaix$gren_tui$UI$normalizeWidth, $blaix$gren_tui$UI$normalizeHeight$(parentAttrs, grids));
	var numRows = $gren_lang$core$Array$length($gren_lang$core$Maybe$withDefault$([ [  ] ], A2($gren_lang$core$Array$get, 0, normalizedGrids)));
	return A3($gren_lang$core$Array$initialize, numRows, 0, function(rowNum) {
			return $gren_lang$core$Array$flatten(A2($gren_lang$core$Array$map, function(g) {
						return $gren_lang$core$Maybe$withDefault$([  ], A2($gren_lang$core$Array$get, rowNum, g));
					}, normalizedGrids));
		});
};
var $blaix$gren_tui$UI$joinHorizontal = F2($blaix$gren_tui$UI$joinHorizontal$);
var $blaix$gren_tui$UI$joinVertical = $gren_lang$core$Array$flatten;
var $blaix$gren_tui$UI$elementToGrid = function(element) {
	switch (element.$) {
		case 0:
			var _v1 = element.a;
			var attrs = _v1.p;
			var children = _v1.aq;
			return $blaix$gren_tui$UI$joinHorizontal$(attrs, A2($gren_lang$core$Array$map, $blaix$gren_tui$UI$elementToGrid, children));
		case 1:
			var children = element.a.aq;
			return $blaix$gren_tui$UI$joinVertical(A2($gren_lang$core$Array$map, $blaix$gren_tui$UI$elementToGrid, children));
		default:
			var _v2 = element.a;
			var attrs = _v2.p;
			var content = _v2.l;
			return [ [ { p: attrs, l: content } ] ];
	}
};
var $blaix$gren_ansi$Ansi$NoColor = 0;
var $blaix$gren_ansi$Ansi$bgColorCode = function(color_) {
	switch (color_) {
		case 0:
			return '49';
		case 1:
			return '40';
		case 2:
			return '41';
		case 3:
			return '42';
		case 4:
			return '43';
		case 5:
			return '44';
		case 6:
			return '45';
		case 7:
			return '46';
		default:
			return '47';
	}
};
var $blaix$gren_ansi$Ansi$setBgColor = function(color) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$prefix, $blaix$gren_ansi$Ansi$bgColorCode(color), 'm' ]);
};
var $blaix$gren_ansi$Ansi$wrapBgColor$ = function(color, string) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$setBgColor(color), string, $blaix$gren_ansi$Ansi$setBgColor(0) ]);
};
var $blaix$gren_ansi$Ansi$wrapBgColor = F2($blaix$gren_ansi$Ansi$wrapBgColor$);
var $blaix$gren_ansi$Ansi$colorCode = function(color_) {
	switch (color_) {
		case 0:
			return '39';
		case 1:
			return '30';
		case 2:
			return '31';
		case 3:
			return '32';
		case 4:
			return '33';
		case 5:
			return '34';
		case 6:
			return '35';
		case 7:
			return '36';
		default:
			return '37';
	}
};
var $blaix$gren_ansi$Ansi$setColor = function(color) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$prefix, $blaix$gren_ansi$Ansi$colorCode(color), 'm' ]);
};
var $blaix$gren_ansi$Ansi$wrapColor$ = function(color, string) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$setColor(color), string, $blaix$gren_ansi$Ansi$setColor(0) ]);
};
var $blaix$gren_ansi$Ansi$wrapColor = F2($blaix$gren_ansi$Ansi$wrapColor$);
var $blaix$gren_ansi$Ansi$NormalWeight = 0;
var $blaix$gren_ansi$Ansi$fontWeightCode = function(weight) {
	switch (weight) {
		case 0:
			return '22';
		case 1:
			return '1';
		default:
			return '2';
	}
};
var $blaix$gren_ansi$Ansi$setFontWeight = function(weight) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$prefix, $blaix$gren_ansi$Ansi$fontWeightCode(weight), 'm' ]);
};
var $blaix$gren_ansi$Ansi$wrapFontWeight$ = function(weight, string) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$setFontWeight(weight), string, $blaix$gren_ansi$Ansi$setFontWeight(0) ]);
};
var $blaix$gren_ansi$Ansi$wrapFontWeight = F2($blaix$gren_ansi$Ansi$wrapFontWeight$);
var $blaix$gren_ansi$Ansi$setItalic = $blaix$gren_ansi$Ansi$prefix + '3m';
var $blaix$gren_ansi$Ansi$unsetItalic = $blaix$gren_ansi$Ansi$prefix + '23m';
var $blaix$gren_ansi$Ansi$wrapItalic = function(string) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$setItalic, string, $blaix$gren_ansi$Ansi$unsetItalic ]);
};
var $blaix$gren_tui$UI$Attribute$apply$ = function(attr, string) {
	switch (attr.$) {
		case 0:
			var c = attr.a;
			return $blaix$gren_ansi$Ansi$wrapColor$(c, string);
		case 1:
			var c = attr.a;
			return $blaix$gren_ansi$Ansi$wrapBgColor$(c, string);
		case 2:
			var w = attr.a;
			return $blaix$gren_ansi$Ansi$wrapFontWeight$(w, string);
		default:
			return $blaix$gren_ansi$Ansi$wrapItalic(string);
	}
};
var $blaix$gren_tui$UI$Attribute$apply = F2($blaix$gren_tui$UI$Attribute$apply$);
var $blaix$gren_tui$UI$Attribute$applyAll$ = function(attrs, str) {
	return A3($gren_lang$core$Array$foldr, $blaix$gren_tui$UI$Attribute$apply, str, attrs);
};
var $blaix$gren_tui$UI$Attribute$applyAll = F2($blaix$gren_tui$UI$Attribute$applyAll$);
var $blaix$gren_tui$UI$cellToString = function(cell) {
	return $blaix$gren_tui$UI$Attribute$applyAll$(cell.p, $blaix$gren_tui$SingleLine$toString(cell.l));
};
var $blaix$gren_tui$UI$gridToString = function(grid) {
	return A2($gren_lang$core$String$join, '\n', A2($gren_lang$core$Array$map, $gren_lang$core$String$join(''), A2($gren_lang$core$Array$map, $gren_lang$core$Array$map($blaix$gren_tui$UI$cellToString), grid)));
};
var $blaix$gren_tui$UI$Row = function (a) {
	return { $: 0, a: a };
};
var $blaix$gren_tui$UI$mergeAttributes$ = function(parentAttrs, element) {
	switch (element.$) {
		case 0:
			var _v1 = element.a;
			var attrs = _v1.p;
			var children = _v1.aq;
			return $blaix$gren_tui$UI$Row({ p: _Utils_ap(parentAttrs, attrs), aq: A2($gren_lang$core$Array$map, $blaix$gren_tui$UI$mergeAttributes(_Utils_ap(parentAttrs, attrs)), children) });
		case 1:
			var _v2 = element.a;
			var attrs = _v2.p;
			var children = _v2.aq;
			return $blaix$gren_tui$UI$Col({ p: _Utils_ap(parentAttrs, attrs), aq: A2($gren_lang$core$Array$map, $blaix$gren_tui$UI$mergeAttributes(_Utils_ap(parentAttrs, attrs)), children) });
		default:
			var _v3 = element.a;
			var attrs = _v3.p;
			var content = _v3.l;
			return $blaix$gren_tui$UI$Text({ p: _Utils_ap(parentAttrs, attrs), l: content });
	}
};
var $blaix$gren_tui$UI$mergeAttributes = F2($blaix$gren_tui$UI$mergeAttributes$);
var $gren_lang$core$String$slice = _String_slice;
var $gren_lang$core$String$dropRight$ = function(n, string) {
	return (n < 1) ? string : A3($gren_lang$core$String$slice, 0, -n, string);
};
var $gren_lang$core$String$dropRight = F2($gren_lang$core$String$dropRight$);
var $blaix$gren_tui$SingleLine$dropRight$ = function(n, _v0) {
	var string = _v0;
	return $gren_lang$core$String$dropRight$(n, string);
};
var $blaix$gren_tui$SingleLine$dropRight = F2($blaix$gren_tui$SingleLine$dropRight$);
var $blaix$gren_tui$UI$trimGridRow$ = function(maxWidth, thisRow) {
	trimGridRow:
	while (true) {
		var width = $blaix$gren_tui$UI$gridWidth([ thisRow ]);
		var popped = $gren_lang$core$Array$popLast(thisRow);
		var diff = width - maxWidth;
		if (popped.$ === 1) {
			return thisRow;
		} else {
			var _v1 = popped.a;
			var initial = _v1.bk;
			var last = _v1.aN;
			if (_Utils_cmp(diff, $blaix$gren_tui$SingleLine$width(last.l)) > -1) {
				var $temp$maxWidth = maxWidth,
				$temp$thisRow = initial;
				maxWidth = $temp$maxWidth;
				thisRow = $temp$thisRow;
				continue trimGridRow;
			} else {
				return $gren_lang$core$Array$pushLast$(_Utils_update(last, { l: $blaix$gren_tui$SingleLine$dropRight$(diff, last.l) }), initial);
			}
		}
	}
};
var $blaix$gren_tui$UI$trimGridRow = F2($blaix$gren_tui$UI$trimGridRow$);
var $blaix$gren_tui$UI$trimGrid$ = function(maxWidth, grid) {
	var width = $blaix$gren_tui$UI$gridWidth(grid);
	return (width <= 0) ? grid : ((_Utils_cmp(width, maxWidth) < 1) ? grid : $blaix$gren_tui$UI$trimGrid$(maxWidth, A2($gren_lang$core$Array$map, $blaix$gren_tui$UI$trimGridRow(maxWidth), grid)));
};
var $blaix$gren_tui$UI$trimGrid = F2($blaix$gren_tui$UI$trimGrid$);
var $blaix$gren_tui$UI$toString$ = function(maxWidth, element) {
	return $blaix$gren_tui$UI$gridToString($blaix$gren_tui$UI$trimGrid$(maxWidth, $blaix$gren_tui$UI$elementToGrid($blaix$gren_tui$UI$mergeAttributes$([  ], element))));
};
var $blaix$gren_tui$UI$toString = F2($blaix$gren_tui$UI$toString$);
var $blaix$gren_ansi$Ansi$Down = 1;
var $blaix$gren_tui$Tui$adjustFirstRow$ = function(model, numLines) {
	var scrolledRows = ((model.v + numLines) - 1) - model.aC;
	var firstRowAdjusted = (scrolledRows > 0) ? (model.v - scrolledRows) : model.v;
	return (firstRowAdjusted < 1) ? 1 : firstRowAdjusted;
};
var $blaix$gren_tui$Tui$adjustFirstRow = F2($blaix$gren_tui$Tui$adjustFirstRow$);
var $gren_lang$core$String$prepend = _String_append;
var $gren_lang$core$String$append$ = function(lhs, rhs) {
	return A2($gren_lang$core$String$prepend, rhs, lhs);
};
var $gren_lang$core$String$append = F2($gren_lang$core$String$append$);
var $blaix$gren_ansi$Ansi$moveTo$ = function(row, col) {
	return A2($gren_lang$core$String$join, '', [ $blaix$gren_ansi$Ansi$prefix, $gren_lang$core$String$fromInt(row), ';', $gren_lang$core$String$fromInt(col), 'H' ]);
};
var $blaix$gren_ansi$Ansi$moveTo = F2($blaix$gren_ansi$Ansi$moveTo$);
var $blaix$gren_tui$Tui$render$ = function(model, viewString) {
	return $gren_lang$node$Stream$sendString$(model.aA, $gren_lang$core$String$append$($blaix$gren_ansi$Ansi$clearScreen(1), A2($gren_lang$core$String$prepend, $blaix$gren_ansi$Ansi$moveTo$(model.v, 0), viewString)));
};
var $blaix$gren_tui$Tui$render = F2($blaix$gren_tui$Tui$render$);
var $blaix$gren_tui$Tui$view$ = function(appView, model) {
	var element = appView(model.U);
	if (_Utils_eq(element, model.ah)) {
		return { ba: $gren_lang$core$Platform$Cmd$none, bp: model };
	} else {
		var lines = $gren_lang$core$String$lines($blaix$gren_tui$UI$toString$(model.an, element));
		var numLines = $gren_lang$core$Array$length(lines);
		var newFirstRow = $blaix$gren_tui$Tui$adjustFirstRow$(model, numLines);
		var viewString = A2($gren_lang$core$String$join, '\n', A2($gren_lang$core$Array$map, $gren_lang$core$String$append($blaix$gren_ansi$Ansi$clearLine(1)), lines));
		return { ba: $gren_lang$core$Task$execute($blaix$gren_tui$Tui$render$(model, viewString)), bp: _Utils_update(model, { v: newFirstRow, ah: element }) };
	}
};
var $blaix$gren_tui$Tui$view = F2($blaix$gren_tui$Tui$view$);
var $blaix$gren_tui$Tui$update$ = function(appConfig, msg, model) {
	switch (msg.$) {
		case 0:
			var bytes = msg.a;
			var input = $blaix$gren_tui$Tui$bytesToInput(bytes);
			var doAppUpdate = $blaix$gren_tui$Tui$appUpdate$(appConfig.cz, appConfig.cc(input), model);
			switch (input.$) {
				case 10:
					return { ba: $gren_lang$core$Task$execute($blaix$gren_tui$Tui$exit(model.aA)), bp: model };
				case 9:
					var row = input.a;
					var col = input.b;
					return model.V ? doAppUpdate : { ba: $gren_lang$core$Task$execute($gren_lang$node$Stream$sendString$(model.aA, $blaix$gren_ansi$Ansi$clearLine(0))), bp: _Utils_update(model, { V: true, v: row }) };
				default:
					return doAppUpdate;
			}
		case 1:
			var _v2 = msg.a;
			var rows = _v2.P;
			var columns = _v2.J;
			var oldViewString = $blaix$gren_tui$UI$toString$(model.an, model.ah);
			var wrappedLines = $gren_lang$core$Array$any$(function(w) {
					return _Utils_cmp(w, columns) > 0;
				}, A2($gren_lang$core$Array$map, $blaix$gren_ansi$Ansi$width, $gren_lang$core$String$lines(oldViewString)));
			var newFirstRow = wrappedLines ? 1 : model.v;
			var cmd = wrappedLines ? $gren_lang$core$Task$execute($gren_lang$node$Stream$sendString$(model.aA, $blaix$gren_ansi$Ansi$clearScreen(2))) : $gren_lang$core$Platform$Cmd$none;
			return { ba: cmd, bp: _Utils_update(model, { v: newFirstRow, ah: $blaix$gren_tui$UI$text$([  ], ''), an: columns, aC: rows }) };
		case 2:
			var appMsg = msg.a;
			return $blaix$gren_tui$Tui$appUpdate$(appConfig.cz, appMsg, model);
		default:
			var viewResult = $blaix$gren_tui$Tui$view$(appConfig.cG, model);
			var _v3 = { bK: model.aE, ck: model.V };
			if (_v3.ck && (!_v3.bK.$)) {
				var cmd = _v3.bK.a;
				return { ba: $gren_lang$core$Platform$Cmd$batch([ viewResult.ba, A2($gren_lang$core$Platform$Cmd$map, $blaix$gren_tui$Tui$AppMsg, cmd) ]), bp: _Utils_update(viewResult.bp, { aE: $gren_lang$core$Maybe$Nothing }) };
			} else {
				return viewResult;
			}
	}
};
var $blaix$gren_tui$Tui$update = F3($blaix$gren_tui$Tui$update$);
var $blaix$gren_tui$Tui$defineProgram = function(appConfig) {
	return $gren_lang$node$Node$defineProgram({ b4: $blaix$gren_tui$Tui$init(appConfig.b4), ct: $blaix$gren_tui$Tui$subscriptions(appConfig.ct), cz: $blaix$gren_tui$Tui$update(appConfig) });
};
var $author$project$Main$Game = function (a) {
	return { $: 1, a: a };
};
var $blaix$gren_ansi$Ansi$hideCursor = $blaix$gren_ansi$Ansi$prefix + '?25l';
var $blaix$gren_tui$Tui$hideCursor = function(stdout) {
	return $gren_lang$node$Stream$sendString$(stdout, $blaix$gren_ansi$Ansi$hideCursor);
};
var $author$project$Game$Idle = 0;
var $author$project$Game$Escaping = { $: 1 };
var $author$project$Helpers$arrayIndexedMap = $gren_lang$core$Array$indexedMap;
var $author$project$Game$Ghost = 1;
var $author$project$Game$Left = 2;
var $author$project$Helpers$arrayFromList = $gren_lang$core$Basics$identity;
var $author$project$Game$charGhosts = $author$project$Helpers$arrayFromList([ '█', '▉', '▓', '▒' ]);
var $author$project$Game$ghostsTypes = $gren_lang$core$Array$length($author$project$Game$charGhosts);


// MATH

var _Math_remainderBy = F2(function (b, a) {
  return a % b;
});

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Math_modBy = F2(function (modulus, x) {
  var answer = x % modulus;
  return modulus === 0
    ? _Debug_crash(11)
    : (answer > 0 && modulus < 0) || (answer < 0 && modulus > 0)
      ? answer + modulus
      : answer;
});

// CONSTANTS

var _Math_pi = Math.PI;
var _Math_e = Math.E;
var _Math_maxSafeInteger = Number.MAX_SAFE_INTEGER;
var _Math_minSafeInteger = Number.MIN_SAFE_INTEGER;
var _Math_maxFloat = Number.MAX_VALUE;

// TRIGONOMETRY

var _Math_cos = Math.cos;
var _Math_sin = Math.sin;
var _Math_tan = Math.tan;
var _Math_acos = Math.acos;
var _Math_asin = Math.asin;
var _Math_atan = Math.atan;
var _Math_atan2 = F2(Math.atan2);

// MORE MATH

var _Math_truncate = Math.trunc;
var _Math_ceiling = Math.ceil;
var _Math_floor = Math.floor;
var _Math_round = Math.round;
var _Math_sqrt = Math.sqrt;
var _Math_log = Math.log;
var _Math_log10 = Math.log10;
var $gren_lang$core$Math$modBy = _Math_modBy;
var $author$project$Helpers$modBy = $gren_lang$core$Math$modBy;
var $author$project$Game$initGhost$ = function(positionSpawnGhosts, index) {
	return { aF: $gren_lang$core$Maybe$withDefault$('', A2($gren_lang$core$Array$get, A2($author$project$Helpers$modBy, $author$project$Game$ghostsTypes, index), $author$project$Game$charGhosts)), h: 2, aK: 1, b: positionSpawnGhosts.b, c: positionSpawnGhosts.c };
};
var $author$project$Game$initGhost = F2($author$project$Game$initGhost$);
var $author$project$Game$Player = 0;
var $author$project$Game$playerShapes = { aI: '∩', aL: '☻', aO: '⊃', ay: 'c', a3: 'u' };
var $author$project$Game$initPlayer = function(positionAndDirectionSpawnPlayer) {
	return { aF: $author$project$Game$playerShapes.ay, h: positionAndDirectionSpawnPlayer.h, aK: 0, b: positionAndDirectionSpawnPlayer.b, c: positionAndDirectionSpawnPlayer.c };
};
var $author$project$Game$initGame_$ = function(level, args) {
	var ghosts = A2($author$project$Helpers$arrayIndexedMap, F2(function(index, _v0) {
				return $author$project$Game$initGhost$(level.ai, index);
			}), $gren_lang$core$Array$repeat$(args.E, 0));
	return { i: 0, s: args.x, n: level.n, d: ghosts, aa: level.n, g: level, j: false, m: $author$project$Game$initPlayer(level.bx), k: $author$project$Game$Escaping, y: 0, a: args.a };
};
var $author$project$Game$initGame_ = F2($author$project$Game$initGame_$);
var $gren_lang$core$String$dropLeft$ = function(n, string) {
	return (n < 1) ? string : A3($gren_lang$core$String$slice, n, $gren_lang$core$String$length(string), string);
};
var $gren_lang$core$String$dropLeft = F2($gren_lang$core$String$dropLeft$);
var $gren_lang$core$String$replace$ = function(before, after, string) {
	return A2($gren_lang$core$String$join, after, A2($gren_lang$core$String$split, before, string));
};
var $gren_lang$core$String$replace = F3($gren_lang$core$String$replace$);
var $author$project$Game$flipBoxCorners = function(string) {
	return $gren_lang$core$String$replace$('‡', '╰', $gren_lang$core$String$replace$('╰', '╯', $gren_lang$core$String$replace$('╯', '‡', $gren_lang$core$String$replace$('‡', '╭', $gren_lang$core$String$replace$('╭', '╮', $gren_lang$core$String$replace$('╮', '‡', string))))));
};
var $gren_lang$core$String$reverse = _String_reverse;
var $author$project$Game$mirrotHorizontally = function(board) {
	return A2($gren_lang$core$Array$map, function(row) {
			return _Utils_ap(row, $author$project$Game$flipBoxCorners($gren_lang$core$String$dropLeft$(1, $gren_lang$core$String$reverse(row))));
		}, board);
};
var $author$project$Game$board0 = $author$project$Game$mirrotHorizontally($author$project$Helpers$arrayFromList([ '╭─────────────────────────╮ ', '│ • • • • • • • • • • • • │ ', '│ • ╭─────╮ • ╭───────╮ • │ ', '│ ● │     │ • │       │ • │ ', '│ • ╰─────╯ • ╰───────╯ • ╰─', '│ • • • • • • • • • • • • • ', '│ • ╭─────╮ • ╭─╮ • ╭───────', '│ • ╰─────╯ • │ │ • ╰─────╮ ', '│ • • • • • • │ │ • • • • │ ', '╰─────────╮ • │ ╰─────╮ + │ ', '          │ • │ ╭─────╯ + ╰─', '          │ • │ │ + + + + + ', '          │ • │ │ + ╭───=   ', '──────────╯ • ╰─╯ + │ = =   ', '↔ * * * * * • + + + │ =     ', '──────────╮ • ╭─╮ + │ = = † ', '          │ • │ │ + ╰───────', '          │ • │ │ + + + + + ', '          │ • │ │ + ╭───────', '╭─────────╯ • ╰─╯ + ╰─────╮ ', '│ • • • • • • • • • • • • │ ', '│ • ╭─────╮ • ╭───────╮ • │ ', '│ • ╰───╮ │ • ╰───────╯ • ╰─', '│ ● • • │ │ • • • • • • • → ', '╰───╮ • │ │ • ╭─╮ • ╭───────', '╭───╯ • ╰─╯ • │ │ • ╰─────╮ ', '│ • • • • • • │ │ • • • • │ ', '│ • ╭─────────╯ ╰─────╮ • │ ', '│ • ╰─────────────────╯ • ╰─', '│ • • • • • • • • • • • • • ', '╰───────────────────────────' ]));
var $author$project$Helpers$arrayPushLast = $gren_lang$core$Array$pushLast;
var $gren_lang$core$Array$filter = _Array_filter;
var $gren_lang$core$Array$member$ = function(value, array) {
	var _v0 = A2($gren_lang$core$Array$findFirst, function(v) {
			return _Utils_eq(v, value);
		}, array);
	if (!_v0.$) {
		return true;
	} else {
		return false;
	}
};
var $gren_lang$core$Array$member = F2($gren_lang$core$Array$member$);
var $author$project$Helpers$countOccurrences$ = function(target, str) {
	return $gren_lang$core$Array$length(A2($gren_lang$core$Array$filter, function(_char) {
				return $gren_lang$core$Array$member$(_char, target);
			}, A2($gren_lang$core$String$split, '', str)));
};
var $author$project$Helpers$countOccurrences = F2($author$project$Helpers$countOccurrences$);
var $gren_lang$core$Array$empty = [  ];
var $gren_lang$core$Array$indexedFoldl = _Array_indexedFoldl;
var $author$project$Helpers$arrayIndexedFoldl = $gren_lang$core$Array$indexedFoldl;
var $gren_lang$core$String$contains = _String_contains;
var $author$project$Helpers$stringSplit = $gren_lang$core$String$split;
var $author$project$Game$findCharInString$ = function(_char, string) {
	return A2($gren_lang$core$String$contains, _char, string) ? A3($author$project$Helpers$arrayIndexedFoldl, F3(function(index, charFromString, acc) {
				return _Utils_eq(_char, charFromString) ? A2($author$project$Helpers$arrayPushLast, index, acc) : acc;
			}), $gren_lang$core$Array$empty, A2($author$project$Helpers$stringSplit, '', string)) : $gren_lang$core$Array$empty;
};
var $author$project$Game$findCharInString = F2($author$project$Game$findCharInString$);
var $gren_lang$core$Basics$idiv = _Basics_idiv;
var $author$project$Game$findCharInBoard$ = function(_char, board) {
	return A3($author$project$Helpers$arrayIndexedFoldl, F3(function(indexY, row, acc) {
				return A3($gren_lang$core$Array$foldl, F2(function(indexX, acc2) {
							return A2($author$project$Helpers$arrayPushLast, { b: (indexX / 2) | 0, c: indexY }, acc2);
						}), acc, $author$project$Game$findCharInString$(_char, row));
			}), $gren_lang$core$Array$empty, board);
};
var $author$project$Game$findCharInBoard = F2($author$project$Game$findCharInBoard$);
var $author$project$Game$Down = 1;
var $author$project$Game$Right = 3;
var $author$project$Game$Up = 0;
var $author$project$Game$tiles = { H: '+', L: '●', Z: '•', aR: '=', aS: '*', aT: '†', aU: '↓', aV: '←', aW: '→', aX: '↑', a_: '↔', a$: '↕' };
var $author$project$Game$getPositionAndDirectionSpawnPlayer = function(board) {
	var _v0 = A2($gren_lang$core$Array$get, 0, $author$project$Game$findCharInBoard$($author$project$Game$tiles.aV, board));
	if (!_v0.$) {
		var p = _v0.a;
		return { h: 2, b: p.b, c: p.c };
	} else {
		var _v1 = A2($gren_lang$core$Array$get, 0, $author$project$Game$findCharInBoard$($author$project$Game$tiles.aX, board));
		if (!_v1.$) {
			var p = _v1.a;
			return { h: 0, b: p.b, c: p.c };
		} else {
			var _v2 = A2($gren_lang$core$Array$get, 0, $author$project$Game$findCharInBoard$($author$project$Game$tiles.aW, board));
			if (!_v2.$) {
				var p = _v2.a;
				return { h: 3, b: p.b, c: p.c };
			} else {
				var _v3 = A2($gren_lang$core$Array$get, 0, $author$project$Game$findCharInBoard$($author$project$Game$tiles.aU, board));
				if (!_v3.$) {
					var p = _v3.a;
					return { h: 1, b: p.b, c: p.c };
				} else {
					return { h: 3, b: 3, c: 1 };
				}
			}
		}
	}
};
var $author$project$Game$getPositionSpawnGhosts = function(board) {
	var _v0 = A2($gren_lang$core$Array$get, 0, $author$project$Game$findCharInBoard$($author$project$Game$tiles.aT, board));
	if (!_v0.$) {
		var p = _v0.a;
		return { b: p.b, c: p.c };
	} else {
		return { b: 1, c: 1 };
	}
};
var $author$project$Game$replace$ = function(a, b, board) {
	return A2($gren_lang$core$Array$map, A2($gren_lang$core$String$replace, a, b), board);
};
var $author$project$Game$replace = F3($author$project$Game$replace$);
var $author$project$Game$removeMarkingTiles = function(board) {
	return A3($gren_lang$core$Array$foldl, F2(function(_char, acc) {
				return $author$project$Game$replace$(_char, $author$project$Game$tiles.H, acc);
			}), board, $author$project$Helpers$arrayFromList([ $author$project$Game$tiles.aV, $author$project$Game$tiles.aX, $author$project$Game$tiles.aW, $author$project$Game$tiles.aU, $author$project$Game$tiles.aT, $author$project$Game$tiles.a$, $author$project$Game$tiles.a_ ]));
};
var $author$project$Helpers$stringJoin = $gren_lang$core$String$join;
var $author$project$Game$boardToLevel = function(board) {
	var teleports = function () {
		var getTeleport = function(_char) {
			var teleports_ = $author$project$Game$findCharInBoard$(_char, board);
			var _v1 = A2($gren_lang$core$Array$get, 0, teleports_);
			if (!_v1.$) {
				var a = _v1.a;
				var _v2 = A2($gren_lang$core$Array$get, 1, teleports_);
				if (!_v2.$) {
					var b = _v2.a;
					return $gren_lang$core$Maybe$Just({ T: a, X: b });
				} else {
					return $gren_lang$core$Maybe$Nothing;
				}
			} else {
				return $gren_lang$core$Maybe$Nothing;
			}
		};
		return A3($gren_lang$core$Array$foldl, F2(function(_char, acc) {
					var _v0 = getTeleport(_char);
					if (!_v0.$) {
						var teleport = _v0.a;
						return A2($author$project$Helpers$arrayPushLast, teleport, acc);
					} else {
						return acc;
					}
				}), $gren_lang$core$Array$empty, $author$project$Helpers$arrayFromList([ $author$project$Game$tiles.a_, $author$project$Game$tiles.a$ ]));
	}();
	var boardWidth = $gren_lang$core$Maybe$withDefault$(10, $gren_lang$core$Maybe$map$($gren_lang$core$String$length, A2($gren_lang$core$Array$get, 0, board)));
	var boardDots = $author$project$Helpers$countOccurrences$($author$project$Helpers$arrayFromList([ $author$project$Game$tiles.L, $author$project$Game$tiles.Z ]), A2($author$project$Helpers$stringJoin, '', board));
	return { C: $author$project$Game$removeMarkingTiles(board), n: boardDots, bg: $gren_lang$core$Array$length(board), bx: $author$project$Game$getPositionAndDirectionSpawnPlayer(board), ai: $author$project$Game$getPositionSpawnGhosts(board), bF: teleports, a4: boardWidth };
};
var $author$project$Game$level0 = $author$project$Game$boardToLevel($author$project$Game$board0);
var $author$project$Game$board1 = $author$project$Helpers$arrayFromList([ '──────────────────────────────────────────────────────────╮', '↔ → • • • • • • • • • • • • • • • • • • • • • • • • • • • │', '╭─────────────────────────────────────────────────────╮ • │', '│ • • • • • • • • • • • • • • • ● • • • • • • • • • • │ • │', '│ • ╭─────────────────────────────────────────────╮ • │ • │', '│ • │ • • • • • • • • • • • • • • • • • • • • • • │ • │ • │', '│ • │ • ╭─────────────────────────────────────╮ • │ • │ • │', '│ • │ • │ • • • • • • • • • • • ● • • • • • • │ • │ • │ • │', '│ • │ • │ • ╭─────────────────────────────╮ • │ • │ • │ • │', '│ • │ • │ • │ • • • • • • • • • • • • • • │ • │ • │ • │ • │', '│ • │ • │ • │ • ╭─────────────────────╮ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • • • • • • • • • • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • ╭─────────────╮ • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • │ • • • • • • │ • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • │ • ╭─────╮ • │ • │ • │ • │ • │ • │ • │', '│ • │ † │ • │ • │ • │ • │ • ↔ │ • │ • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • │ • │ • ──╯ • │ • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • │ • │ • • • • │ • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • │ • ╰─────────╯ • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • │ • • • • • • • • │ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • ╰─────────────────╯ • │ • │ • │ • │ • │', '│ • │ • │ • │ • │ • • • • • • • • • • • • │ • │ • │ • │ • │', '│ • │ • │ • │ • ╰─────────────────────────╯ • │ • │ • │ • │', '│ • │ • │ • │ • • • • • • • • • • • • • • • • │ • │ • │ • │', '│ • │ • │ • ╰─────────────────────────────────╯ • │ • │ • │', '│ • │ • │ • • • • • • • • • • • • • • • • • • • • │ • │ • │', '│ • │ • ╰─────────────────────────────────────────╯ • │ • │', '│ • │ • • • • • • • • • • • • • • • • • • • • • • • • │ • │', '│ • ╰─────────────────────────────────────────────────╯ • │', '│ • • • • • • • • • • • • • • • • • • • • • • • • • • • • │', '╰─────────────────────────────────────────────────────────╯' ]);
var $author$project$Game$board2 = $author$project$Helpers$arrayFromList([ '╭───────────────────────────────╮ ↕ ╭─────────╮', '│                               │ • │         │', '╰───────────────────────────────╯ • │         │', '↔ • • • • • • • • • • • • • • • • • │         │', '╭─────────╮ • ╭─────╮ • ╭───────╮ • │         │', '│         │ ● │     │ • │       │ • │         │', '│         │ • ╰─────╯ • ╰───────╯ • │         │', '│         │ • • • • • • • • • • • ↑ │         │', '│         │ • ╭─────╮ • ╭─╮ • ╭─────╯         │', '│         │ • │     │ • │ │ • │               │', '│         │ • ╰─────╯ • │ │ • ╰───────────────╯', '│         │ • • • • • • │ │ • • • • • • • • • ↔', '│         │ • ╭─────╮ = │ ╰───────────────────╮', '│         │ • │     │ = ╰───╮                 │', '│         │ • │     │ = = † │                 │', '│         │ • │     ╰───────╯                 │', '╰─────────╯ ↕ ╰───────────────────────────────╯' ]);
var $author$project$Game$board3 = $author$project$Helpers$arrayFromList([ '╭─────────────────────────────────────────────────────────────────╮', '│ • • • • • • • • • ● • • • • • • • • • • • • • • • • • • • • • • │', '│ • ╭─────────────╮ • ╭───────────────────────────────────────╮ • │', '│ • │ ╭───────────╯ • ╰─────────────────────────────────────╮ │ • │', '│ • │ │╭╮╭╮╭╮╭╮╭╮╭╮ • ╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮│ │ • │', '│ • │ ╰╯╰╯╰╯╰╯╰╯╰╯│ • │╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯ │ • │', '│ • │ ╭─────────╮ │ • ╰───────────────────────────────────────╯ • │', '│ • ╰─╯ ╭───────╯ │ • • • • • • • • • • • • • • • • • • • • • • • │', '│ • = † │╭╮╭╮╭╮╭╮╭╯ • ╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭─╮ ↓ │', '│ • = = ╰╯╰╯╰╯╰╯╰╯  • │╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯ │ • │', '│ • ╭─────────────╮ • ╰───────────────────────────────────────╯ • │', '│ • │ ╭───────────╯ • • • • • • • • • • • • • • • • • • • • • • • │', '│ • │ │╭╮╭╮╭╮╭╮╭╮╭╮ • ╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭─╮ • │', '│ • │ ╰╯╰╯╰╯╰╯╰╯╰╯│ • │╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯ │ • │', '│ • │ ╭╮╭╮╭╮╭╮╭╮╭╮│ • │╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮╭╮ │ • │', '│ • ╰─╯╰╯╰╯╰╯╰╯╰╯╰╯ • ╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰╯╰─╯ • │', '│ • • • • • • • • • • • • • • • • • • • • • • • • • • • • • ● • • │', '╰─────────────────────────────────────────────────────────────────╯' ]);
var $author$project$Game$levels = $author$project$Helpers$arrayFromList([ $author$project$Game$level0, $author$project$Game$boardToLevel($author$project$Game$board1), $author$project$Game$boardToLevel($author$project$Game$board2), $author$project$Game$boardToLevel($author$project$Game$board3) ]);
var $author$project$Game$initModel$ = function(_v0, args, _v1) {
	var levelId = _v0.x;
	var isRunningInTerminal = _v1.b5;
	var game = $author$project$Game$initGame_$($gren_lang$core$Maybe$withDefault$($author$project$Game$level0, A2($gren_lang$core$Array$get, levelId, $author$project$Game$levels)), { E: args.au, x: levelId, a: 0 });
	return { i: game.i, s: game.s, aH: false, n: game.n, o: args.N, d: game.d, N: args.N, au: args.au, aa: game.aa, b5: isRunningInTerminal, ad: '', g: game.g, j: game.j, m: game.m, k: game.k, y: game.y, q: false, a: game.a };
};
var $author$project$Game$initModel = F3($author$project$Game$initModel$);
var $author$project$Game$init = function(isRunningInTerminal) {
	return { ba: $gren_lang$core$Platform$Cmd$none, bp: $author$project$Game$initModel$({ x: 0 }, { N: 30, au: 20 }, isRunningInTerminal) };
};
var $author$project$Main$init = function(env) {
	return function(game) {
		return $gren_lang$node$Node$startProgram({ ba: $gren_lang$core$Platform$Cmd$batch([ $gren_lang$core$Task$execute($blaix$gren_tui$Tui$hideCursor(env.aA)), A2($gren_lang$core$Platform$Cmd$map, $author$project$Main$Game, game.ba) ]), bp: { w: game.bp, aA: env.aA } });
	}($author$project$Game$init({ b5: true }));
};
var $author$project$Game$Every = function (a) {
	return { $: 0, a: a };
};
var $author$project$Game$Lost = 4;
var $author$project$Game$Quitting = 2;
var $author$project$Game$Won = 3;
var $gren_lang$core$Math$round = _Math_round;
var $author$project$Helpers$round = $gren_lang$core$Math$round;
var $gren_lang$core$Basics$toFloat = _Basics_toFloat;
var $author$project$Game$subscriptions = function(model) {
	return (model.j || ((model.a === 2) || ((model.a === 3) || (model.a === 4)))) ? $gren_lang$core$Platform$Sub$none : $gren_lang$core$Time$every$($author$project$Helpers$round(1000 / model.o), $author$project$Game$Every);
};
var $author$project$Main$subscriptions = function(model) {
	return A2($gren_lang$core$Platform$Sub$map, $author$project$Main$Game, $author$project$Game$subscriptions(model.w));
};
var $gren_lang$core$Json$Decode$succeed = _Json_succeed;
var $author$project$Game$OnKeyDown = function (a) {
	return { $: 1, a: a };
};
var $author$project$Game$HuntingGhosts = function (a) {
	return { $: 0, a: a };
};
var $author$project$Game$Menu = 5;
var $author$project$Game$Playing = 1;
var $gren_lang$core$Array$set = _Array_set;
var $author$project$Game$boardSetHelper$ = function(func, _char, position, board) {
	return function(array1) {
		var _v0 = A2($gren_lang$core$Array$get, position.c, array1);
		if (!_v0.$) {
			var row = _v0.a;
			var newRow = A2($author$project$Helpers$stringJoin, '', function(array2) {
					var _v1 = A2($gren_lang$core$Array$get, func(position.b), array2);
					if (!_v1.$) {
						return A3($gren_lang$core$Array$set, func(position.b), _char, array2);
					} else {
						return array2;
					}
				}($author$project$Helpers$arrayFromList(A2($gren_lang$core$String$split, '', row))));
			return A3($gren_lang$core$Array$set, position.c, newRow, array1);
		} else {
			return array1;
		}
	}(board);
};
var $author$project$Game$boardSetHelper = F4($author$project$Game$boardSetHelper$);
var $gren_lang$core$Basics$mul = _Basics_mul;
var $author$project$Game$boardSetDoubleWidth = $author$project$Game$boardSetHelper(function(i) {
		return i * 2;
	});
var $author$project$Game$playerChar$ = function(counter, character) {
	if (A2($author$project$Helpers$modBy, 4, counter) > 1) {
		return $author$project$Game$playerShapes.aL;
	} else {
		var _v0 = character.h;
		switch (_v0) {
			case 0:
				return $author$project$Game$playerShapes.a3;
			case 1:
				return $author$project$Game$playerShapes.aI;
			case 2:
				return $author$project$Game$playerShapes.aO;
			default:
				return $author$project$Game$playerShapes.ay;
		}
	}
};
var $author$project$Game$playerChar = F2($author$project$Game$playerChar$);
var $author$project$Game$setCharacters$ = function(counter, board, characters) {
	return A3($gren_lang$core$Array$foldl, F2(function(character, level_) {
				return (!character.aK) ? A3($author$project$Game$boardSetDoubleWidth, $author$project$Game$playerChar$(counter, character), { b: character.b, c: character.c }, level_) : A3($author$project$Game$boardSetDoubleWidth, character.aF, { b: character.b, c: character.c }, level_);
			}), board, characters);
};
var $author$project$Game$setCharacters = F3($author$project$Game$setCharacters$);
var $author$project$Game$addPlayerAndGhostsToLevel$ = function(status, counter, ghosts, player, board) {
	return $author$project$Game$setCharacters$(counter, board, function(array) {
			return (!status) ? array : A2($author$project$Helpers$arrayPushLast, player, array);
		}(ghosts));
};
var $author$project$Game$addPlayerAndGhostsToLevel = F5($author$project$Game$addPlayerAndGhostsToLevel$);
var $author$project$Helpers$arrayMember = $gren_lang$core$Array$member;
var $gren_lang$core$Array$range$ = function(from, to) {
	return (_Utils_cmp(from, to) > 0) ? [  ] : (_Utils_eq(from, to) ? [ from ] : A3($gren_lang$core$Array$initialize, (to - from) + 1, from, $gren_lang$core$Basics$identity));
};
var $gren_lang$core$Array$range = F2($gren_lang$core$Array$range$);
var $author$project$Helpers$arrayRange = $gren_lang$core$Array$range;
var $author$project$Game$charsPlayer = $author$project$Helpers$arrayFromList([ $author$project$Game$playerShapes.aL, $author$project$Game$playerShapes.a3, $author$project$Game$playerShapes.aI, $author$project$Game$playerShapes.aO, $author$project$Game$playerShapes.ay ]);
var $author$project$Game$tilesWhereGhostCanGoWithShield = $author$project$Helpers$arrayFromList([ $author$project$Game$tiles.Z, $author$project$Game$tiles.L, $author$project$Game$tiles.aR, $author$project$Game$tiles.H ]);
var $gren_lang$core$Array$prepend = _Array_append;
var $author$project$Helpers$arrayPrepend = $gren_lang$core$Array$prepend;
var $author$project$Game$tilesWhereGhostCanGoWithoutShield = A2($author$project$Helpers$arrayPrepend, $author$project$Game$tilesWhereGhostCanGoWithShield, $author$project$Game$charsPlayer);
var $author$project$Game$canGoGhost$ = function(_v0, _char) {
	var isShield = _v0.bl;
	return isShield ? A2($author$project$Helpers$arrayMember, _char, $author$project$Game$tilesWhereGhostCanGoWithShield) : A2($author$project$Helpers$arrayMember, _char, $author$project$Game$tilesWhereGhostCanGoWithoutShield);
};
var $author$project$Game$canGoGhost = F2($author$project$Game$canGoGhost$);
var $author$project$Game$directions = $author$project$Helpers$arrayFromList([ 0, 1, 2, 3 ]);
var $author$project$Game$levelGet$ = function(position, board) {
	return $gren_lang$core$Maybe$withDefault$('│', function(array1) {
			var _v0 = A2($gren_lang$core$Array$get, position.c, array1);
			if (!_v0.$) {
				var row = _v0.a;
				var rowAsArray = $author$project$Helpers$arrayFromList(A2($gren_lang$core$String$split, '', row));
				return A2($gren_lang$core$Array$get, position.b * 2, rowAsArray);
			} else {
				return $gren_lang$core$Maybe$Nothing;
			}
		}(board));
};
var $author$project$Game$levelGet = F2($author$project$Game$levelGet$);
var $author$project$Game$move$ = function(direction, character) {
	switch (direction) {
		case 0:
			return _Utils_update(character, { c: character.c - 1 });
		case 1:
			return _Utils_update(character, { c: character.c + 1 });
		case 2:
			return _Utils_update(character, { b: character.b - 1 });
		default:
			return _Utils_update(character, { b: character.b + 1 });
	}
};
var $author$project$Game$move = F2($author$project$Game$move$);
var $author$project$Game$oppositeDirection = function(direction) {
	switch (direction) {
		case 0:
			return 1;
		case 1:
			return 0;
		case 2:
			return 3;
		default:
			return 2;
	}
};
var $author$project$Game$ghostAvailableDirections$ = function(isShield, character, board) {
	return A3($gren_lang$core$Array$foldl, F2(function(direction, acc) {
				return _Utils_eq(direction, $author$project$Game$oppositeDirection(character.h)) ? acc : ($author$project$Game$canGoGhost$({ bl: isShield }, $author$project$Game$levelGet$($author$project$Game$move$(direction, character), board)) ? A2($author$project$Helpers$arrayPushLast, direction, acc) : acc);
			}), $gren_lang$core$Array$empty, $author$project$Game$directions);
};
var $author$project$Game$ghostAvailableDirections = F3($author$project$Game$ghostAvailableDirections$);
var $author$project$Game$moveCharacter = function(character) {
	return $author$project$Game$move$(character.h, character);
};
var $author$project$Game$moveIfPossibleGhost$ = function(isShield, board, character) {
	var _char = $author$project$Game$levelGet$($author$project$Game$move$(character.h, character), board);
	return $author$project$Game$canGoGhost$(isShield, _char) ? $author$project$Game$moveCharacter(character) : character;
};
var $author$project$Game$moveIfPossibleGhost = F3($author$project$Game$moveIfPossibleGhost$);
var $gren_lang$core$Time$posixToMillis = function(_v0) {
	var millis = _v0;
	return millis;
};
var $author$project$Game$ghostsMoveLogic$ = function(isShield, posix, board, character) {
	var avDirections = $author$project$Game$ghostAvailableDirections$(isShield, character, board);
	if ($gren_lang$core$Array$length(avDirections) > 0) {
		var index = A2($author$project$Helpers$modBy, $gren_lang$core$Array$length(avDirections), $gren_lang$core$Time$posixToMillis(posix));
		var direction = $gren_lang$core$Maybe$withDefault$(2, A2($gren_lang$core$Array$get, index, avDirections));
		return $author$project$Game$moveCharacter(_Utils_update(character, { h: direction }));
	} else {
		return $author$project$Game$moveIfPossibleGhost$({ bl: isShield }, board, _Utils_update(character, { h: $author$project$Game$oppositeDirection(character.h) }));
	}
};
var $author$project$Game$ghostsMoveLogic = F4($author$project$Game$ghostsMoveLogic$);
var $gren_lang$core$Basics$neq = _Utils_notEqual;
var $author$project$Game$calculateNewGhostsPositions$ = function(model, newPlayer, posix) {
	return A3($gren_lang$core$Array$foldl, F2(function(index, acc) {
				var _v0 = A2($gren_lang$core$Array$get, index, acc.d);
				if (!_v0.$) {
					var ghost = _v0.a;
					var tempLevelWithPlayerAndGhosts = $author$project$Game$addPlayerAndGhostsToLevel$(model.a, model.i, acc.d, newPlayer, model.g.C);
					var ghostInNewPosition = $author$project$Game$ghostsMoveLogic$(model.q, posix, tempLevelWithPlayerAndGhosts, ghost);
					var isHit = function(_char) {
						return A2($author$project$Helpers$arrayMember, _char, $author$project$Game$charsPlayer);
					}($author$project$Game$levelGet$(ghostInNewPosition, tempLevelWithPlayerAndGhosts));
					return { d: A3($gren_lang$core$Array$set, index, ((!_Utils_eq(model.k, $author$project$Game$Escaping)) && isHit) ? _Utils_update(ghostInNewPosition, { b: model.g.ai.b, c: model.g.ai.c }) : ghostInNewPosition, acc.d), ab: isHit ? true : acc.ab };
				} else {
					return acc;
				}
			}), { d: model.d, ab: false }, A2($author$project$Helpers$arrayRange, 0, $gren_lang$core$Array$length(model.d)));
};
var $author$project$Game$calculateNewGhostsPositions = F3($author$project$Game$calculateNewGhostsPositions$);
var $author$project$Game$tilesWherePlayerCanGo = $author$project$Helpers$arrayFromList([ $author$project$Game$tiles.Z, $author$project$Game$tiles.L, $author$project$Game$tiles.H, $author$project$Game$tiles.aS ]);
var $author$project$Game$canGoPlayer = function(_char) {
	return A2($author$project$Helpers$arrayMember, _char, $author$project$Game$tilesWherePlayerCanGo);
};
var $author$project$Game$keyToMaybeDirection = function(key) {
	return ((key === 'w') || (key === 'ArrowUp')) ? $gren_lang$core$Maybe$Just(0) : (((key === 'a') || (key === 'ArrowLeft')) ? $gren_lang$core$Maybe$Just(2) : (((key === 's') || (key === 'ArrowDown')) ? $gren_lang$core$Maybe$Just(1) : (((key === 'd') || (key === 'ArrowRight')) ? $gren_lang$core$Maybe$Just(3) : $gren_lang$core$Maybe$Nothing)));
};
var $author$project$Game$handleChangeDirectionOfPlayer$ = function(key, player, board) {
	var _v0 = $author$project$Game$keyToMaybeDirection(key);
	if (!_v0.$) {
		var direction = _v0.a;
		return $author$project$Game$canGoPlayer($author$project$Game$levelGet$($author$project$Game$move$(direction, player), board)) ? direction : player.h;
	} else {
		return player.h;
	}
};
var $author$project$Game$handleChangeDirectionOfPlayer = F3($author$project$Game$handleChangeDirectionOfPlayer$);
var $author$project$Game$initGame$ = function(args, model) {
	var _v0 = A2($gren_lang$core$Array$get, args.x, $author$project$Game$levels);
	if (!_v0.$) {
		var level = _v0.a;
		var game = $author$project$Game$initGame_$(level, args);
		return _Utils_update(model, { i: game.i, s: game.s, n: game.n, d: game.d, aa: game.aa, g: game.g, j: game.j, m: game.m, k: game.k, y: game.y, a: game.a });
	} else {
		return model;
	}
};
var $author$project$Game$initGame = F2($author$project$Game$initGame$);
var $author$project$Game$charsInDots = $author$project$Helpers$arrayFromList([ $author$project$Game$tiles.L, $author$project$Game$tiles.Z ]);
var $author$project$Game$isDot = function(_char) {
	return A2($author$project$Helpers$arrayMember, _char, $author$project$Game$charsInDots);
};
var $author$project$Game$moveIfPossiblePlayer$ = function(board, character) {
	var _char = $author$project$Game$levelGet$($author$project$Game$move$(character.h, character), board);
	return $author$project$Game$canGoPlayer(_char) ? $author$project$Game$moveCharacter(character) : character;
};
var $author$project$Game$moveIfPossiblePlayer = F2($author$project$Game$moveIfPossiblePlayer$);
var $gren_lang$core$Basics$not = _Basics_not;
var $author$project$Game$teleportPlayer$ = function(teleports, character) {
	return A3($gren_lang$core$Array$foldl, F2(function(teleport, acc) {
				return (_Utils_eq(acc.b, teleport.T.b) && _Utils_eq(acc.c, teleport.T.c)) ? _Utils_update(acc, { b: teleport.X.b, c: teleport.X.c }) : ((_Utils_eq(acc.b, teleport.X.b) && _Utils_eq(acc.c, teleport.X.c)) ? _Utils_update(acc, { b: teleport.T.b, c: teleport.T.c }) : acc);
			}), character, teleports);
};
var $author$project$Game$teleportPlayer = F2($author$project$Game$teleportPlayer$);
var $author$project$Game$update_$ = function(msg, model) {
	if (msg.$ === 1) {
		var key = msg.a;
		return function(m) {
			return ((!m.a) || ((m.a === 3) || ((m.a === 4) || (m.a === 5)))) ? ((key === 'Enter') ? (_Utils_eq(model.o, model.N) ? $author$project$Game$initGame$({ E: 4, x: m.s, a: 1 }, _Utils_update(m, { o: 8, q: false })) : $author$project$Game$initGame$({ E: $gren_lang$core$Array$length(m.d), x: m.s, a: 1 }, m)) : ((key === 'f') ? $author$project$Game$initGame$({ E: $gren_lang$core$Array$length(m.d), x: m.s, a: 1 }, _Utils_update(m, { o: model.N, q: true })) : ((key === 'm') ? ((m.a === 5) ? _Utils_update(m, { a: 0 }) : _Utils_update(m, { a: 5 })) : m))) : m;
		}(function(m) {
				if (m.j && (key !== 'Meta')) {
					return _Utils_update(m, { j: false });
				} else {
					if (key === 'b') {
						return _Utils_update(m, { aH: !m.aH });
					} else {
						if (m.a === 2) {
							return _Utils_update(m, { a: (key === 'y') ? 0 : ((key === 'n') ? 1 : m.a) });
						} else {
							if (('1' <= key) && (key <= '9')) {
								var levelId = function(lid) {
									return lid - 1;
								}($gren_lang$core$Maybe$withDefault$(0, $gren_lang$core$String$toInt(key)));
								return $author$project$Game$initGame$({ E: $gren_lang$core$Array$length(m.d), x: levelId, a: m.a }, m);
							} else {
								return _Utils_update(m, { o: ((key === 'y') && (m.o >= 2)) ? (m.o - 1) : (((key === 'u') && (m.o <= 59)) ? (m.o + 1) : m.o), d: (key === 'i') ? A3($gren_lang$core$Array$slice, 0, $gren_lang$core$Array$length(m.d) - 1, m.d) : ((key === 'o') ? A2($author$project$Helpers$arrayPushLast, $author$project$Game$initGhost$(m.g.ai, $gren_lang$core$Array$length(m.d)), m.d) : m.d), j: (key === ' ') ? (!m.j) : m.j, q: (key === 'l') ? (!m.q) : m.q, a: ((m.a === 1) && (key === 'q')) ? 2 : m.a });
							}
						}
					}
				}
			}(function(m) {
					return _Utils_update(m, { ad: key });
				}(model)));
	} else {
		var posix = msg.a;
		if ((!model.a) && (A2($author$project$Helpers$modBy, 150, model.i + 1) === 0)) {
			return $author$project$Game$initGame$({ E: $gren_lang$core$Array$length(model.d), x: A2($author$project$Helpers$modBy, $gren_lang$core$Array$length($author$project$Game$levels), model.s + 1), a: model.a }, model);
		} else {
			var newPlayer = $author$project$Game$teleportPlayer$(model.g.bF, function () {
					if (model.a === 1) {
						var levelWithPlayerAndGhosts = $author$project$Game$addPlayerAndGhostsToLevel$(model.a, model.i, model.d, model.m, model.g.C);
						var requestToChangeDirectionOfPlayer = $author$project$Game$handleChangeDirectionOfPlayer$(model.ad, model.m, levelWithPlayerAndGhosts);
						return $author$project$Game$moveIfPossiblePlayer$(levelWithPlayerAndGhosts, function(p) {
								return _Utils_update(p, { h: requestToChangeDirectionOfPlayer });
							}(model.m));
					} else {
						return model.m;
					}
				}());
			var squareUnderPlayer = $author$project$Game$levelGet$(newPlayer, model.g.C);
			var newGhosts = $author$project$Game$calculateNewGhostsPositions$({ i: model.i, d: model.d, g: model.g, k: model.k, q: model.q, a: model.a }, newPlayer, posix);
			var newDots = $author$project$Game$isDot(squareUnderPlayer) ? (model.n - 1) : model.n;
			var isWon = (model.a === 1) && (newDots === 0);
			return _Utils_update(model, { i: model.i + 1, n: newDots, d: newGhosts.d, g: $author$project$Game$isDot(squareUnderPlayer) ? function(l) {
					return _Utils_update(l, { C: A3($author$project$Game$boardSetDoubleWidth, $author$project$Game$tiles.H, newPlayer, l.C) });
				}(model.g) : model.g, m: newPlayer, k: function () {
					if (_Utils_eq(squareUnderPlayer, $author$project$Game$tiles.L)) {
						return $author$project$Game$HuntingGhosts({ cq: model.i });
					} else {
						var _v1 = model.k;
						if (_v1.$ === 1) {
							return $author$project$Game$Escaping;
						} else {
							var since = _v1.a.cq;
							return ((model.i - since) > 100) ? $author$project$Game$Escaping : model.k;
						}
					}
				}(), y: (newGhosts.ab && ((model.a === 1) && (!_Utils_eq(model.k, $author$project$Game$Escaping)))) ? (model.y + 1) : model.y, a: function () {
					if (isWon) {
						return 3;
					} else {
						var isLost = newGhosts.ab && ((model.a === 1) && _Utils_eq(model.k, $author$project$Game$Escaping));
						return isLost ? 4 : model.a;
					}
				}() });
		}
	}
};
var $author$project$Game$update_ = F2($author$project$Game$update_$);
var $author$project$Game$update$ = function(msg, model) {
	return { ba: $gren_lang$core$Platform$Cmd$none, bp: $author$project$Game$update_$(msg, model) };
};
var $author$project$Game$update = F2($author$project$Game$update$);
var $author$project$Main$sendKey$ = function(model, key) {
	return function(game) {
		return { ba: A2($gren_lang$core$Platform$Cmd$map, $author$project$Main$Game, game.ba), bp: _Utils_update(model, { w: game.bp }) };
	}($author$project$Game$update$($author$project$Game$OnKeyDown(key), model.w));
};
var $author$project$Main$sendKey = F2($author$project$Main$sendKey$);
var $author$project$Main$update$ = function(msg, model) {
	if (msg.$ === 1) {
		var gameMsg = msg.a;
		return function(game) {
			return { ba: A2($gren_lang$core$Platform$Cmd$map, $author$project$Main$Game, game.ba), bp: _Utils_update(model, { w: game.bp }) };
		}($author$project$Game$update$(gameMsg, model.w));
	} else {
		var input = msg.a;
		switch (input.$) {
			case 4:
				return { ba: $gren_lang$core$Task$execute($blaix$gren_tui$Tui$exit(model.aA)), bp: model };
			case 0:
				var key = input.a;
				return $author$project$Main$sendKey$(model, key);
			case 5:
				return $author$project$Main$sendKey$(model, 'ArrowUp');
			case 6:
				return $author$project$Main$sendKey$(model, 'ArrowDown');
			case 7:
				return $author$project$Main$sendKey$(model, 'ArrowLeft');
			case 8:
				return $author$project$Main$sendKey$(model, 'ArrowRight');
			case 2:
				return $author$project$Main$sendKey$(model, ' ');
			case 3:
				return $author$project$Main$sendKey$(model, 'Enter');
			default:
				return { ba: $gren_lang$core$Platform$Cmd$none, bp: model };
		}
	}
};
var $author$project$Main$update = F2($author$project$Main$update$);
var $blaix$gren_ansi$Ansi$Green = 3;
var $blaix$gren_ansi$Ansi$Blue = 5;
var $blaix$gren_ansi$Ansi$Cyan = 7;
var $blaix$gren_ansi$Ansi$Magenta = 6;
var $blaix$gren_ansi$Ansi$Red = 2;
var $author$project$Game$TileEndOfLine = { $: 4 };
var $blaix$gren_ansi$Ansi$White = 8;
var $blaix$gren_ansi$Ansi$Yellow = 4;
var $blaix$gren_ansi$Ansi$Black = 1;
var $blaix$gren_ansi$Ansi$Faint = 2;
var $author$project$Main$styleWithFontWeight$ = function(color, bgColor, fontWeight) {
	return _Utils_ap($blaix$gren_ansi$Ansi$setColor(color), _Utils_ap($blaix$gren_ansi$Ansi$setBgColor(bgColor), $blaix$gren_ansi$Ansi$setFontWeight(fontWeight)));
};
var $author$project$Main$styleWithFontWeight = F3($author$project$Main$styleWithFontWeight$);
var $author$project$Main$colorDot = $author$project$Main$styleWithFontWeight$(4, 1, 2);
var $author$project$Main$styleWithBgColor$ = function(color, bgColor) {
	return $author$project$Main$styleWithFontWeight$(color, bgColor, 0);
};
var $author$project$Main$styleWithBgColor = F2($author$project$Main$styleWithBgColor$);
var $author$project$Main$style = function(color) {
	return $author$project$Main$styleWithBgColor$(color, 1);
};
var $author$project$Main$colorNotVisible = $author$project$Main$style(1);
var $author$project$Main$tileTypeToClass$ = function(index, charType) {
	if ((index === 0) && (!_Utils_eq(charType, $author$project$Game$TileEndOfLine))) {
		return $author$project$Main$style(5);
	} else {
		switch (charType.$) {
			case 0:
				return $author$project$Main$style(5);
			case 1:
				return $author$project$Main$colorDot;
			case 2:
				return $author$project$Main$style(2);
			case 3:
				return $author$project$Main$colorDot;
			case 5:
				return $author$project$Main$style(4);
			case 6:
				return $author$project$Main$colorNotVisible;
			case 4:
				return $author$project$Main$colorNotVisible;
			case 8:
				return $author$project$Main$styleWithBgColor$(8, 5);
			case 7:
				return $author$project$Main$styleWithBgColor$(5, 5);
			case 10:
				return $author$project$Main$style(5);
			case 9:
				var id = charType.a;
				switch (id) {
					case 0:
						return $author$project$Main$style(7);
					case 1:
						return $author$project$Main$style(4);
					case 2:
						return $author$project$Main$style(2);
					default:
						return $author$project$Main$style(6);
				}
			default:
				return $author$project$Main$colorDot;
		}
	}
};
var $author$project$Main$tileTypeToClass = F2($author$project$Main$tileTypeToClass$);
var $author$project$Main$charToTile$ = function(index, tileType, _char, acc) {
	var _class = $author$project$Main$tileTypeToClass$(index, tileType);
	return _Utils_eq(acc.cg, _class) ? _Utils_update(acc, { cu: _Utils_ap(acc.cu, _char) }) : ((acc.cg === '') ? _Utils_update(acc, { cg: _class, cu: _char }) : _Utils_update(acc, { cg: _class, cu: _char, bG: $gren_lang$core$Array$pushLast$(_Utils_ap(acc.cg, acc.cu), acc.bG) }));
};
var $author$project$Main$charToTile = F4($author$project$Main$charToTile$);
var $author$project$Game$boolToOnOff = function(bool) {
	return bool ? 'ON' : 'OFF';
};
var $author$project$Game$keysMenu = function(_v0) {
	var isRunningInTerminal = _v0.b5;
	return $author$project$Helpers$arrayFromList(_Utils_ap([ '     PLAY [ENTER]  ', 'FAST PLAY [F]      ', '     MOVE [W A S D]', '          [↑ ← ↓ →]', '    PAUSE [SPACE]  ', '     MENU [M]      ', '     QUIT [Q]      ', '      FPS [Y]↘ [U]↗', '   GHOSTS [I]↘ [O]↗', '    DEBUG [B]      ', '   SHIELD [L]      ', '   LEVELS [1]~[' + ($gren_lang$core$String$fromInt($gren_lang$core$Array$length($author$project$Game$levels)) + ']  ') ], isRunningInTerminal ? [ '     EXIT [ESC]    ' ] : [  ]));
};
var $gren_lang$core$String$toUpper = _String_toUpper;
var $author$project$Game$debugText = function(model) {
	var status = function () {
		var _v1 = model.a;
		switch (_v1) {
			case 1:
				return 'Playing';
			case 0:
				return 'Idle';
			case 2:
				return 'Quitting';
			case 3:
				return 'Won';
			case 4:
				return 'Lost';
			default:
				return 'Menu';
		}
	}();
	var modeToString = function(mode) {
		if (!mode.$) {
			var since = mode.a.cq;
			return 'Hunting ' + $gren_lang$core$String$fromInt(since);
		} else {
			return 'Escaping';
		}
	};
	var key = (model.ad === ' ') ? 'Space' : model.ad;
	return A2($gren_lang$core$Array$map, function(s) {
			return ' ' + $gren_lang$core$String$toUpper(s);
		}, A2($author$project$Helpers$arrayPrepend, $author$project$Helpers$arrayFromList([ '', '', '' ]), A2($author$project$Helpers$arrayPrepend, $author$project$Game$keysMenu(model), A2($author$project$Helpers$arrayPrepend, $author$project$Helpers$arrayFromList([ '' ]), A2($gren_lang$core$Array$map, function(s) {
							return '   ' + $gren_lang$core$String$toUpper(s);
						}, $author$project$Helpers$arrayFromList([ 'Frames ' + $gren_lang$core$String$fromInt(model.i), 'Points ' + $gren_lang$core$String$fromInt(model.y), '  Dots ' + $gren_lang$core$String$fromInt(model.n), '   Key ' + key, 'Ghosts ' + $gren_lang$core$String$fromInt($gren_lang$core$Array$length(model.d)), '   FPS ' + $gren_lang$core$String$fromInt(model.o), ' Pause ' + $author$project$Game$boolToOnOff(model.j), 'Status ' + status, 'Shield ' + $author$project$Game$boolToOnOff(model.q), '  Mode ' + modeToString(model.k), 'Player ' + ($gren_lang$core$String$fromInt(model.m.b) + (',' + $gren_lang$core$String$fromInt(model.m.c))) ]))))));
};
var $blaix$gren_tui$UI$row$ = function(attrs, children) {
	return $blaix$gren_tui$UI$Row({ p: attrs, aq: children });
};
var $blaix$gren_tui$UI$row = F2($blaix$gren_tui$UI$row$);
var $gren_lang$core$Basics$max$ = function(x, y) {
	return (_Utils_cmp(x, y) > 0) ? x : y;
};
var $gren_lang$core$Basics$max = F2($gren_lang$core$Basics$max$);
var $author$project$Game$boardSetSingleWidth = $author$project$Game$boardSetHelper($gren_lang$core$Basics$identity);
var $author$project$Game$superimposeText$ = function(strings, position, board) {
	return A3($author$project$Helpers$arrayIndexedFoldl, F3(function(indexY, row, boardA) {
				return A3($author$project$Helpers$arrayIndexedFoldl, F3(function(indexX, _char, boardB) {
							return A3($author$project$Game$boardSetSingleWidth, _char, { b: position.b + indexX, c: position.c + indexY }, boardB);
						}), boardA, $author$project$Helpers$arrayFromList(A2($gren_lang$core$String$split, '', row)));
			}), board, strings);
};
var $author$project$Game$superimposeText = F3($author$project$Game$superimposeText$);
var $author$project$Game$addOverlay$ = function(isPause, status, msg, level_, board) {
	if ($gren_lang$core$Array$length(msg) === 0) {
		return board;
	} else {
		var margin = ((status === 1) && (!isPause)) ? 0 : 1;
		var width = A3($gren_lang$core$Array$foldl, F2(function(row, acc) {
					return $gren_lang$core$Basics$max$($gren_lang$core$String$length(row), acc);
				}), 0, msg) + (margin * 4);
		var height = $gren_lang$core$Array$length(msg) + margin;
		var position = { b: ((level_.a4 - width) / 2) | 0, c: ((level_.bg - height) / 2) | 0 };
		var headerFooter = $gren_lang$core$String$repeat$(width, '`');
		var addHederFooter = function(array) {
			return (margin === 1) ? A2($author$project$Helpers$arrayPrepend, $author$project$Helpers$arrayFromList([ headerFooter ]), A2($author$project$Helpers$arrayPushLast, headerFooter, array)) : array;
		};
		var msgFull = addHederFooter(A2($gren_lang$core$Array$map, function(row) {
					return function(r) {
						return (_Utils_cmp($gren_lang$core$String$length(r), width) < 0) ? (r + '`') : r;
					}(function(r) {
							return _Utils_ap($gren_lang$core$String$repeat$(((width - $gren_lang$core$String$length(r)) / 2) | 0, '`'), _Utils_ap(r, $gren_lang$core$String$repeat$(((width - $gren_lang$core$String$length(r)) / 2) | 0, '`')));
						}($gren_lang$core$String$replace$(' ', '`', row)));
				}, msg));
		return $author$project$Game$superimposeText$(msgFull, position, board);
	}
};
var $author$project$Game$addOverlay = F5($author$project$Game$addOverlay$);
var $author$project$Game$TileDot = { $: 3 };
var $author$project$Game$TileGhostEscaping = function (a) {
	return { $: 9, a: a };
};
var $author$project$Game$TileGhostHunting = { $: 10 };
var $author$project$Game$TileLevelWhileIdle = { $: 1 };
var $author$project$Game$TileLevelWhilePlaying = { $: 0 };
var $author$project$Game$TileLevelWhileShield = { $: 2 };
var $author$project$Game$TileModalNotVisible = { $: 7 };
var $author$project$Game$TileModalVisible = { $: 8 };
var $author$project$Game$TileNoOp = { $: 11 };
var $author$project$Game$TileNotVisible = { $: 6 };
var $author$project$Game$TilePlayer = { $: 5 };
var $author$project$Game$arrayFind$ = function(predicate, array) {
	var findIndex = function(index) {
		findIndex:
		while (true) {
			if (_Utils_cmp(index, $gren_lang$core$Array$length(array)) > -1) {
				return $gren_lang$core$Maybe$Nothing;
			} else {
				var _v0 = A2($gren_lang$core$Array$get, index, array);
				if (_v0.$ === 1) {
					return $gren_lang$core$Maybe$Nothing;
				} else {
					var element = _v0.a;
					if (_Utils_eq(predicate, element)) {
						return $gren_lang$core$Maybe$Just(index);
					} else {
						var $temp$index = index + 1;
						index = $temp$index;
						continue findIndex;
					}
				}
			}
		}
	};
	return findIndex(0);
};
var $author$project$Game$arrayFind = F2($author$project$Game$arrayFind$);
var $author$project$Game$charsInLevel = $author$project$Helpers$arrayFromList([ '╰', '╮', '╭', '╯', '─', '│' ]);
var $author$project$Game$charsNotVisible = $author$project$Helpers$arrayFromList([ $author$project$Game$tiles.H, $author$project$Game$tiles.aR, $author$project$Game$tiles.aS ]);
var $author$project$Game$charToTileType$ = function(playingMode, isPlaying, isShielded, _char) {
	if (A2($author$project$Helpers$arrayMember, _char, $author$project$Game$charsInLevel)) {
		return isPlaying ? (isShielded ? $author$project$Game$TileLevelWhileShield : $author$project$Game$TileLevelWhilePlaying) : $author$project$Game$TileLevelWhileIdle;
	} else {
		if (A2($author$project$Helpers$arrayMember, _char, $author$project$Game$charsInDots)) {
			return $author$project$Game$TileDot;
		} else {
			if (A2($author$project$Helpers$arrayMember, _char, $author$project$Game$charsPlayer)) {
				return $author$project$Game$TilePlayer;
			} else {
				if (A2($author$project$Helpers$arrayMember, _char, $author$project$Game$charsNotVisible)) {
					return $author$project$Game$TileNotVisible;
				} else {
					if (_char === '`') {
						return $author$project$Game$TileModalNotVisible;
					} else {
						if (_char === '\n') {
							return $author$project$Game$TileEndOfLine;
						} else {
							if (A2($gren_lang$core$String$contains, _char, '-~⍫!?0123456789ABCDEFGHIJKLMNOPQRSTUVWZXY[]↘↗↑←↓→.:')) {
								return $author$project$Game$TileModalVisible;
							} else {
								var _v0 = $author$project$Game$arrayFind$(_char, $author$project$Game$charGhosts);
								if (!_v0.$) {
									var index = _v0.a;
									return _Utils_eq(playingMode, $author$project$Game$Escaping) ? $author$project$Game$TileGhostEscaping(index) : $author$project$Game$TileGhostHunting;
								} else {
									return $author$project$Game$TileNoOp;
								}
							}
						}
					}
				}
			}
		}
	}
};
var $author$project$Game$charToTileType = F4($author$project$Game$charToTileType$);
var $author$project$Game$scoreCalculator = function(_v0) {
	var initialDots = _v0.aa;
	var counter = _v0.i;
	var points = _v0.y;
	var dots = _v0.n;
	return ((initialDots - dots) + (points * 10)) - ((counter / 10) | 0);
};
var $author$project$Game$scoreText = function(model) {
	var score = $author$project$Game$scoreCalculator(model);
	return (score <= 0) ? '' : (' SCORE ' + ($gren_lang$core$String$fromInt($author$project$Game$scoreCalculator(model)) + ' '));
};
var $author$project$Game$overlayMain = function(model) {
	var msgEnterToPlay = $author$project$Helpers$arrayFromList([ '     PLAY [ENTER]', 'FAST PLAY [F]    ', '     QUIT [Q]    ', '     MENU [M]    ' ]);
	var _v0 = model.a;
	switch (_v0) {
		case 0:
			return msgEnterToPlay;
		case 2:
			return $author$project$Helpers$arrayFromList([ 'QUIT THE GAME?', '', '[Y]ES  [N]O' ]);
		case 1:
			return $gren_lang$core$Array$empty;
		case 3:
			return A2($author$project$Helpers$arrayPrepend, $author$project$Helpers$arrayFromList([ 'LEVEL COMPLETED!', '', $gren_lang$core$String$replace$(' ', '`', $author$project$Game$scoreText(model)), '' ]), msgEnterToPlay);
		case 4:
			return A2($author$project$Helpers$arrayPrepend, $author$project$Helpers$arrayFromList([ 'YOU LOST!', '', $gren_lang$core$String$replace$(' ', '`', $author$project$Game$scoreText(model)), '' ]), msgEnterToPlay);
		default:
			return $author$project$Game$keysMenu(model);
	}
};
var $author$project$Game$overlayPause = function(model) {
	return model.j ? $author$project$Helpers$arrayFromList([ 'PAUSED', '', '  ANY KEY TO RESUME  ' ]) : $author$project$Helpers$arrayFromList([  ]);
};
var $author$project$Game$title = 'github.com/lucamug/functional-pacman ';
var $author$project$Game$titleLength = $gren_lang$core$String$length($author$project$Game$title);
var $author$project$Game$viewHeader$ = function(score, width) {
	return _Utils_ap(score, _Utils_ap($gren_lang$core$String$repeat$((width - $gren_lang$core$String$length(score)) - $author$project$Game$titleLength, ' '), $author$project$Game$title));
};
var $author$project$Game$viewHeader = F2($author$project$Game$viewHeader$);
var $author$project$Game$view$ = function(funcs, model) {
	return A2($gren_lang$core$Array$indexedMap, F2(function(index, row) {
				return function(resultFromFoldl) {
					return A2(funcs.cv, index, resultFromFoldl.bG);
				}(A3($gren_lang$core$Array$foldl, F2(function(_char, acc) {
								var tileType = $author$project$Game$charToTileType$(model.k, (model.a === 1) && (!model.j), model.q, _char);
								return A4(funcs.bU, index, tileType, _char, acc);
							}), { cg: '', cu: '', bG: $gren_lang$core$Array$empty }, $author$project$Helpers$arrayFromList(A2($gren_lang$core$String$split, '', row))));
			}), A2($gren_lang$core$Array$map, function(row) {
				return row + '\n';
			}, A2($author$project$Helpers$arrayPrepend, $author$project$Helpers$arrayFromList([ $author$project$Game$viewHeader$($author$project$Game$scoreText(model), model.g.a4) ]), $author$project$Game$addOverlay$(model.j, model.a, $author$project$Game$overlayPause(model), model.g, $author$project$Game$addOverlay$(model.j, model.a, $author$project$Game$overlayMain(model), model.g, $author$project$Game$addPlayerAndGhostsToLevel$(model.a, model.i, model.d, model.m, model.g.C))))));
};
var $author$project$Game$view = F2($author$project$Game$view$);
var $author$project$Main$view = function(model) {
	return $blaix$gren_tui$UI$row$([  ], _Utils_ap([ $blaix$gren_tui$UI$column$([  ], _Utils_ap([ $blaix$gren_tui$UI$text$([  ], '') ], _Utils_ap($author$project$Game$view$({ bU: $author$project$Main$charToTile, cv: F2(function(index, arrayChar) {
									return $blaix$gren_tui$UI$text$([  ], '  ' + A2($gren_lang$core$String$join, '', arrayChar));
								}) }, model.w), [ $blaix$gren_tui$UI$text$([  ], '') ]))) ], model.w.aH ? [ $blaix$gren_tui$UI$column$([  ], A2($gren_lang$core$Array$map, function(row) {
						return $blaix$gren_tui$UI$text$([  ], $blaix$gren_ansi$Ansi$wrapColor$(3, row));
					}, $author$project$Game$debugText(model.w))) ] : [  ]));
};
var $author$project$Main$main = $blaix$gren_tui$Tui$defineProgram({ b4: $author$project$Main$init, cc: $author$project$Main$GotInput, ct: $author$project$Main$subscriptions, cz: $author$project$Main$update, cG: $author$project$Main$view });
_Platform_export({'Main':{'init':$author$project$Main$main($gren_lang$core$Json$Decode$succeed({  }))(0)}});}(this.module ? this.module.exports : this));
this.Gren.Main.init({});
}
catch (e)
{
console.error(e);
}
