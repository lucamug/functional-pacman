module Main exposing ( main )

import Ansi
import Game
import Helpers
import Init
import Node
import Stream
import Task
import Tui
import UI
import UI.Attribute
import UI.Border


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type Msg
    = GotInput Tui.Input
    | Game Game.Msg


type alias Model =
    { stdout : Stream.Stream
    , gameModel : Game.Model
    }


subscriptions : Model -> Sub Msg
subscriptions =
    \model -> Sub.map Game (Game.subscriptions model.gameModel)


init :
    Tui.Environment
    -> Init.Task
        { model : Model
        , command : Cmd Msg
        }
init env =
    Game.init
        |> (\game ->
                Node.startProgram
                    { model =
                        { stdout = env.stdout
                        , gameModel = game.model
                        }
                    , command =
                        Cmd.batch
                            [ Tui.hideCursor env.stdout
                                |> Task.execute
                            , Cmd.map Game game.command
                            ]
                    }
            )


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case msg of
        Game gameMsg ->
            Game.update gameMsg model.gameModel
                |> (\game ->
                        { model = { model | gameModel = game.model }
                        , command = Cmd.map Game game.command
                        }
                    )

        GotInput input ->
            case input of
                Tui.Escape ->
                    { model = model
                    , command =
                        Tui.exit model.stdout
                            |> Task.execute
                    }

                Tui.KeyChar key ->
                    sendKey model key

                Tui.ArrowUp ->
                    sendKey model "ArrowUp"

                Tui.ArrowDown ->
                    sendKey model "ArrowDown"

                Tui.ArrowLeft ->
                    sendKey model "ArrowLeft"

                Tui.ArrowRight ->
                    sendKey model "ArrowRight"

                Tui.Space ->
                    sendKey model " "

                Tui.Return ->
                    sendKey model "Enter"

                _ ->
                    { model = model
                    , command = Cmd.none
                    }


sendKey model key =
    Game.update (Game.OnKeyDown key) model.gameModel
        |> (\game ->
                { model = { model | gameModel = game.model }
                , command = Cmd.map Game game.command
                }
            )


charToTile : Int -> Game.Tile -> String -> Game.Acc String -> Game.Acc String
charToTile index tileType char acc =
    let
        class : String
        class =
            tileTypeToClass index tileType
    in
    if acc.previousTileType == class then
        -- Char with same color
        { acc | textTemp = acc.textTemp ++ char }
    else if acc.previousTileType == "" then
        -- First char in the row
        { acc
            | textTemp = char
            , previousTileType = class
        }
    else
        -- Color variation
        { acc
            | textTemp = char
            , previousTileType = class
            , tiles = Array.pushLast (acc.previousTileType ++ acc.textTemp) acc.tiles
        }


style : Ansi.Color -> Ansi.Color -> String
style a b =
    Ansi.setColor a ++ Ansi.setBgColor b


colorDot : String
colorDot =
    style Ansi.Yellow Ansi.Black


colorNotVisible : String
colorNotVisible =
    style Ansi.Black Ansi.Black


colorEndOfLine : String
colorEndOfLine =
    style Ansi.White Ansi.White


tileTypeToClass : Int -> Game.Tile -> String
tileTypeToClass index charType =
    if index == 0 && charType /= Game.TileEndOfLine then
        style Ansi.Blue Ansi.Black
    else
        case charType of
            Game.TileLevelWhilePlaying ->
                style Ansi.Blue Ansi.Black

            Game.TileLevelWhileIdle ->
                style Ansi.Magenta Ansi.Black

            Game.TileLevelWhileShield ->
                style Ansi.Red Ansi.Black

            Game.TileDot ->
                colorDot

            Game.TilePlayer ->
                style Ansi.Yellow Ansi.Black

            Game.TileNotVisible ->
                colorNotVisible

            Game.TileEndOfLine ->
                colorNotVisible

            Game.TileModalVisible ->
                style Ansi.White Ansi.Blue

            Game.TileModalNotVisible ->
                style Ansi.Blue Ansi.Blue

            Game.TileGhostHunting ->
                style Ansi.Blue Ansi.Black

            Game.TileGhostEscaping id ->
                case id of
                    0 ->
                        style Ansi.Cyan Ansi.Black

                    1 ->
                        style Ansi.Yellow Ansi.Black

                    2 ->
                        style Ansi.Red Ansi.Black

                    _ ->
                        style Ansi.Magenta Ansi.Black

            Game.TileNoOp ->
                colorDot


view : Model -> UI.Element
view model =
    UI.row
        []
        ([ UI.column
            []
            ([ UI.text [] ""
             ]
                ++ (model.gameModel
                        |> Game.view
                                { charToTile = charToTile
                                , tilesToRow = \index arrayChar -> UI.text [] ("  " ++ String.join "" arrayChar)
                                }
                    )
                ++ [ UI.text [] ""
                    ]
            )
         ]
            ++ (if model.gameModel.debug then
                    [ UI.column [] (Array.map (\row -> UI.text [] (Ansi.wrapColor Ansi.Green row)) (Game.debugText model.gameModel))
                    ]
                 else
                    []
                )
        )
